#!/usr/bin/ruby -w

require 'rubygems'
require 'cmdparse'
require 'webrick'

require 'ostruct'
#require 'optparse'
require 'yaml'
require 'sort_by_attributes'

############################################
# GLOBALS:
DEFAULT_NAME = ''
DEFAULT_TASK = 'general'
DEFAULT_CONTEXT = 'wherever'
DEFAULT_PRIORITY = 'C'
DEFAULT_DETAILS = ''

TODO_FILE = 'todo.txt'
DONE_FILE = 'done.txt'
REPORT_FILE = 'report.txt'

$DEFAULT_DIR = "#{ENV['HOME']}/var/todo"

# format: [B] priority
#         @place
#         :project
#         "task"   # quotes optional
#
# [B] @comp     :todo    "add deadlines"


############################################

############################################################
# SERVER SECTION
############################################################
# modified from http://www.igvita.com/2007/02/13/building-dynamic-webrick-servers-in-ruby/

class WebForm < WEBrick::HTTPServlet::AbstractServlet

  def do_GET(request, response)
    status, content_type, body = print_questions(request)

    response.status = status
    response['Content-Type'] = content_type
    response.body = body
  end

  def print_questions(request)
    #html = "<html><body><form method='POST' action='/save'>"
    html = "<html><body>"
    html << "<table>"
    html << "<tr><th>priority</th><th>where</th><th>project</th><th>name</th><th>details</th></tr>"
    $tdl.todolist.each do |obj|
      html << "<tr>"
       %w(priority context project name details).each do |cat|
        html << "<td>#{obj.send(cat.to_sym)}</td>"
       end

      html << "</tr>"
    end
    html << "</table>"

    #html += "Name: <input type='textbox' name='first_name' /><br /><br />";
   # 
   # dbh = DBI.connect("DBI:Mysql:webarchive:localhost", "root", "pass")
   # sth = dbh.execute("SELECT DISTINCT(headline),story,id FROM yahoo_news where date >= '2004-12-01' and date <= '2005-01-01'")
   # 
   #   while row = sth.fetch_hash do
   #       html += "<b>#{row['headline']}</b><br />\n"
   #       html += "#{row['story']}<br />\n"
   #       html += "<input type='textbox' name='#{row['id']}' /><br /><br />\n"
   #  end
   #  sth.finish
     
    #html += "<input type='submit'></form></body></html>"
    html << "</body></html>"
    return 200, "text/html", html
  end
end

class PersistAnswers < WEBrick::HTTPServlet::AbstractServlet

  def do_POST(request, response)
    status, content_type, body = save_answers(request)
    
    response.status = status
    response['Content-Type'] = content_type
    response.body = body
  end

  def save_answers(request)
    if (filename = request.query['first_name'] )
      f = File.open("save-#{filename}.#{Time.now.strftime('%H%M%S')}.txt", 'w')
      request.query.collect { | key, value | 
        f.write("#{key}: #{value}\n")
      }
      f.close
    end
  
    return 200, "text/plain", "Saved! Thank you."
  end
end



############################################################
# END SERVER SECTION
############################################################

# prepare files with complete path
files = {}
complete_path = [TODO_FILE, DONE_FILE, REPORT_FILE].zip([:todo, :done, :report]).map do |file, key|
  files[key] = File.join($DEFAULT_DIR, file)
end

class TodoList
  DEFAULT_CATEGORIES = %w(priority context project name details added )
  attr_accessor :todolist

  def set_ids
    @todolist.each_with_index do |td,i|
      td.id = i
    end
    @todolist
  end

  # sets ids
  def initialize(*todo_objs)
    @todolist = todo_objs
    set_ids
  end

  # gives ids to incoming objects
  def add(*todo_objects)
    @todolist.push( *todo_objects )
    set_ids
  end

  # takes object array index and hash of symbols to change
  def edit(obj_id, hash)
    hash.each do |k,v|
      @todolist[obj_id].send((k.to_s + "=").to_sym, v)
    end
  end

  # takes an array of object id's to delete
  # returns all the deleted objects
  def delete(obj_ids)
    obj_ids.uniq.sort.reverse.map do |obj_id|
      @todolist.delete_at(obj_id)
    end
  end

  # deletes the ids from self and adds them to other
  def done(other, ids)
    deleted_objs = delete(ids)
    other.add(*deleted_objs) 
  end

  def to_file(file)
    File.open(file, "w") {|f| f.puts(self.to_yaml) }
  end

  # sets ids
  def self.from_file(file)
    if File.exist?(file) && (obj = YAML::load_file(file) )
      obj.set_ids
      obj
    else
      obj = self.new 
    end
  end

  # meshes categories with DEFAULT_CATEGORIES
  # expects all strings
  # resolves differences between DEFAULT_CATEGORIES and categories
  def mesh_categories(categories)
    def_cats = DEFAULT_CATEGORIES.dup
    categories.each do |cat|
      def_cats.delete(cat)
    end
    categories.push( *def_cats )
  end

  # orders @todolist by categories and sets their id's
  # returns the categories
  # sets ids again
  def order(categories)
    sym_categories = categories.map {|v| v.to_sym}
    @todolist = todolist.sort_by_attributes(*sym_categories)
    set_ids
    categories
  end

  def cmdline(*categories)
    order(*categories)
    string = @todolist.map do |t|
      t.to_cmdline
    end.join("\n")
    puts string
    string
  end

  # returns a array of the longest width each group
  def max_lengths(*atts)
    atts.map do |att|
      @todolist.inject(0) do |memo,todo|
        sz = todo.send(att).size
        memo >= sz ? memo : sz
      end
    end
  end

  # resets the id's
  # requires list of categories to sort by
  # a partial list of categories will be filled in
  def list(report_file, categories=[])
    categories = mesh_categories(categories)
    cats = order(categories)
    cat_of_interest = cats.first 
    prev_val = nil
    hash = {}
    (hash[:context], hash[:project]) = max_lengths(:context, :project)
    string = @todolist.map do |it|
      string = ""
      current_val = it.send(cat_of_interest)
      if prev_val && prev_val != current_val
        string << "\n"
      end
      string << it.to_s(false, hash)
      prev_val = current_val
      string
    end.join("\n")

    # print to file and screen
    File.open(report_file, "w") do |fh| fh.puts string end
    puts string
  end

end



# Todo object
class Todo
  attr_accessor :name
  attr_accessor :project
  attr_accessor :context
  attr_accessor :details
  attr_accessor :id
  attr_accessor :added

  attr_reader :priority

  def initialize
    yield(self)
    @added = Time.now
  end

  def priority=(val)
    @priority = val.upcase
  end
  # returns mm-dd-yy the item was added
  def mmddyy
    mmdd = [:month, :day].map do |m|
      m = @added.send(m)
      string = if m < 10 ; "0" + m.to_s
               else ; m.to_s
               end
    end.join("-")
    mmdd + '-' + @added.year.to_s[2,2]
  end

  def to_cmdline
    "#{File.basename(__FILE__)} \"#{name}\" -p #{priority} -t #{project} -c #{context} -d \"#{details}\""
  end


  # context + project stringlength to determine
  # widths is a hash :context => max_width, :project => max_width ...etc
  # used for using a maximum width...
  def to_s(show_date=false, widths=nil)
    ## Adjust the widths to display better
    cntxt = context
    tsk = project
    if widths
      cntxt = sprintf("%-#{widths[:context]}s", cntxt)
      tsk = sprintf("%-#{widths[:project]}s", tsk)
    end

    id_s = sprintf("%2d", id)
    project_context_s = "@#{cntxt} :#{tsk}"
    items = ["#{id_s}.", "[#{priority}]", project_context_s, "\"#{name}\""]
    if show_date
      items.insert(3, mmddyy)
    end
    string = items.join(" ")
    if details && details != ''
      string << "\n        ... #{details}"
    end
    string
  end

end


############################
## HELPERS
############################

def comma_list_to_int_ar(string)
  string.split(',').map {|v| v.to_i}
end


# takes a list of args
# looks for symbols at the start (and in some cases end) of the arg
# :project
# @context
# ...[...] details
# [priority]
# name [everything else!]
# returns a hash by attribute symbols for items found
# the key won't exist for unfound items
def filter_args_for_symbols(args)
  hash = {}
  name = []
  args.each do |arg|
    case arg
    when /^:(.+)/
      hash[:project] = $1.dup
    when /^@(.+)/
      hash[:context] = $1.dup
    when /^\.{3,} ?(.+)/m
      hash[:details] = $1.dup
    when /^\[([\w])\]/
      hash[:priority] = $1.dup
    else
      name << arg
    end
  end
  if name.size >= 1
    hash[:name] = name.join(" ")
  end
  hash
end



add_block = proc do |argv|
  # filter on special symbols
  # 'name' will always fall out of this if one is given
  hash = filter_args_for_symbols(argv)
  # reconcile hash with opt struct
  hash.merge!($opt)

  td = Todo.new do |t| 
    t.name = hash[:name] || DEFAULT_NAME
    t.project = hash[:project] || DEFAULT_TASK
    t.context = hash[:context] || DEFAULT_CONTEXT
    t.priority = hash[:priority] || DEFAULT_PRIORITY
    t.details = hash[:details] || DEFAULT_DETAILS
  end
  $tdl.add(td)
end

list_block = proc do |argv|
  $list_cmd = true
  if $opt[:cmdline]
    $tdl.cmdline(*TodoList::DEFAULT_CATEGORIES)
  end

  cats = []
  if $opt[:by]
    cats = $opt[:by]
  end
  $tdl.list(files[:report], cats)
end

## GLOBAL COMMAND OPTIONS
graceful_exceptions = true
cmd_partial_matching = true
cmd = CmdParse::CommandParser.new(graceful_exceptions, cmd_partial_matching)
cmd.program_name = File.basename(__FILE__)
cmd.program_version = [0,0,0]
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on("-d", "--done", "apply to 'done' file") do
    $tdl = $real_donelist
    $donelist = $real_tdl
  end
end
cmd.add_command( CmdParse::HelpCommand.new )
cmd.add_command( CmdParse::VersionCommand.new )

## ADD
sub_cmd = CmdParse::Command.new( 'add', false, true )
sub_cmd.short_desc = "add a todo item"
sub_cmd.options = CmdParse::OptionParserWrapper.new do |op|
  op.on("-c", "--context <s>", "email, computer, work, home, etc.") {|v| $opt[:context]=v}
  op.on("-t", "--project <s>", "the overall project        d: #{DEFAULT_TASK}") {|v| $opt[:project]=v}
  op.on("-p", "--priority <s>", "the priority (A-Z | a-z)   d: #{DEFAULT_PRIORITY}") {|v| $opt[:priority]=v.upcase}
  op.on("-d", "--details <s>", "additional details") {|v| $opt[:details]=v}
end
sub_cmd.set_execution_block {|argv| add_block.call(argv) }
cmd.add_command( sub_cmd )

## LIST
sub_cmd = CmdParse::Command.new( 'list', false, true )
sub_cmd.short_desc = "list item(s)"
sub_cmd.options = CmdParse::OptionParserWrapper.new do |op|
  op.on("-b", "--by <s>", "by different categories", "(#{TodoList::DEFAULT_CATEGORIES.join(", ")})") {|v| $opt[:by] = v.split(',') } 
  op.on("--cmdline", "each item as input by command line") {|v| $opt[:cmdline]=v}
end
sub_cmd.set_execution_block {|argv| list_block.call(argv) }
cmd.add_command( sub_cmd )

## DELETE
sub_cmd = CmdParse::Command.new( 'delete', false, true )
sub_cmd.short_desc = "delete item(s)"
sub_cmd.set_execution_block {|argv| $tdl.delete(comma_list_to_int_ar(argv[0])) }
cmd.add_command( sub_cmd )

## DONE
sub_cmd = CmdParse::Command.new( 'done', false, true )
sub_cmd.short_desc = "done with item(s)"
sub_cmd.set_execution_block {|argv| $tdl.done($donelist, comma_list_to_int_ar(argv[0])) }
cmd.add_command( sub_cmd )

## SERVER
sub_cmd = CmdParse::Command.new( 'server', false, true )
sub_cmd.short_desc = "start webrick server (port 8000)"
sub_cmd.set_execution_block do |argv| 
  #$tdl.delete(comma_list_to_int_ar(argv[0]))
  # run the server
  server = WEBrick::HTTPServer.new(:Port => 8000)
  server.mount "/edit", WebForm
  server.mount "/save", PersistAnswers
  trap "INT" do server.shutdown end
  server.start
end

cmd.add_command( sub_cmd )


## EDIT
sub_cmd = CmdParse::Command.new( 'edit', false, true )
sub_cmd.short_desc = "edit item (only new things)"
sub_cmd.options = CmdParse::OptionParserWrapper.new do |op|
  op.on("-c", "--context <s>", "email, computer, work, home, etc.") {|v| $opt[:context]=v}
  op.on("-t", "--project <s>", "the overall project        d: #{DEFAULT_TASK}") {|v| $opt[:project]=v}
  op.on("-p", "--priority <s>", "the priority (A-Z | a-z)   d: #{DEFAULT_PRIORITY}") {|v| $opt[:priority]=v.upcase}
  op.on("-d", "--details <s>", "additional details") {|v| $opt[:details]=v}
end
sub_cmd.set_execution_block do |argv|
  id_list = comma_list_to_int_ar(argv.shift)
  hash = filter_args_for_symbols(argv)
  %w(context project priority details).each do |v|
    as_sym = v.to_sym
    if $opt[as_sym]
      hash[as_sym] = $opt[as_sym]
    end
  end
  id_list.each do |id|
    $tdl.edit(id, hash)
  end
end
cmd.add_command( sub_cmd )

if __FILE__ == $0

  ## CREATE THE TODO LISTS
  $real_tdl = TodoList.from_file(files[:todo])
  $real_donelist = TodoList.from_file(files[:done])
  $tdl = $real_tdl 
  $donelist = $real_donelist

  # grab 'done' option if passed in (will mess up other catches)
  if ARGV[0] == '-d' || ARGV[0] == "--done"
    $tdl = $real_donelist
    $donelist = $real_tdl
    ARGV.shift
  end

  $opt = {}
  ## display current list (unless explicitly displayed)
  $list_cmd = false
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on("--verbose", "Be verbose when outputting info") {|t| $verbose = true }
end
  ## turn rm into delete
  if ARGV.size == 2 && (ARGV[0] == "rm" || ARGV[0] == "del")
    ARGV[0] = 'delete'
  end

  # if no command given, we cause it to run list command
  if ARGV.size == 0
    ARGV << "list"
  end
  # if the first thing isn't a command then we run add
  unless ARGV[0] == 'help' || cmd.main_command.commands.include?(ARGV[0])
    ARGV.unshift("add")
  end

  # run it!
  cmd.parse

  unless $list_cmd
    $tdl.list(files[:report])
  end


  ## Write to file:
  $real_tdl.to_file(files[:todo]) 
  $real_donelist.to_file(files[:done])
end



