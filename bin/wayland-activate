#!/usr/bin/env python

import argparse
import subprocess
from pathlib import Path

HOME = Path.home()
CONFIG = HOME / ".config"
CHROME_FLAGS = CONFIG / "chrome-flags.conf"
ELECTRON_FLAGS = CONFIG / "electron-flags.conf"

flag_paths = [CHROME_FLAGS, ELECTRON_FLAGS]

WAYLAND_FLAGS = [
    "--enable-features=UseOzonePlatform",
    "--ozone-platform=wayland",
]


def run(cmd: str):
    subprocess.run(cmd, shell=True)


parser = argparse.ArgumentParser()
parser.add_argument(
    "state", choices=["on", "off"], help="set things to use wayland"
)
args = parser.parse_args()


def set_chrome_flags(flags_path: Path):
    print(f"rewriting {str(flags_path)} with wayland options")
    flags_path.unlink(missing_ok=True)
    flags_path.write_text("".join(map(lambda val: val + "\n", WAYLAND_FLAGS)))


def unset_chrome_flags(flags_path: Path):
    print(f"removing special chrome flags: {str(flags_path)}")
    flags_path.unlink(missing_ok=True)


def uninstall(pkg: str):
    run(f"yay -Rs {pkg} --noconfirm")


def install(pkg: str):
    run(f"yay -S {pkg} --noconfirm")


# wayland
if args.state == "on":
    for flag_path in flag_paths:
        set_chrome_flags(flag_path)
    uninstall("xclip")
    install("wl-clipboard-x11")
    uninstall("dmenu")
    install("bemenu-dmenu-wayland")
    print("must also change i3/sway config for bemenu to work!")
else:
    for flag_path in flag_paths:
        unset_chrome_flags(flag_path)
    uninstall("wl-clipboard-x11")
    install("xclip")
    uninstall("bemenu-dmenu-wayland")
    install("dmenu")
    print("must also change i3/sway config for dmenu to work!")
