#!/usr/bin/env python

import argparse
import subprocess
import re
import json

monitor_keys = ["make", "model", "serial"]


def get_monitor_make_model_serial():
    monitors = json.loads(
        subprocess.check_output(["swaymsg", "-t", "get_outputs"], text=True)
    )
    monitor_labels = []
    for monitor in monitors:
        monitor_labels.append(" ".join([monitor[key] for key in monitor_keys]))

    return monitor_labels


# LAPTOP = "Chimei Innolux Corporation 0x1409 0x00000000"
LAPTOP = "Unknown 0x1401 0x00000000"

DELL_UHD = "Dell Inc. DELL U2722D 122BS83"
DELL_4K = "Dell Inc. DELL S2721QS CB64M43"

# For reference, my work and home monitors are:
MONITOR_SCALE = {
    LAPTOP: 1.6,
    DELL_UHD: 1,
    DELL_4K: 1.6,
}

monitor_ids = get_monitor_make_model_serial()
desk = next(
    (
        monitor_id
        for monitor_id in monitor_ids
        if monitor_id.startswith("Dell Inc.")
    ),
    None,
)


MONITORS = dict(
    laptop=LAPTOP,
    desk=desk,
    # treadmill=TREADMILL,
)

config = dict(
    laptop="enable scale {scale} pos 0 0",
    desk="enable scale {scale} pos 0 0",
    disable="disable",
)

parser = argparse.ArgumentParser()
parser.add_argument(
    "monitor",
    nargs="?",
    default="laptop",
    # choices=["laptop", "desk", "treadmill"],
    choices=["laptop", "desk"],
)
parser.add_argument("--dry", action="store_true", help="dry run")
args = parser.parse_args()


def create_swaymsg_output_command(id, config_str):
    return ["swaymsg", f'output "{id}" {config_str}']


def create_single_monitor_commands(value):
    to_disable = [
        name
        for monitor_keyword, name in MONITORS.items()
        if value != monitor_keyword
    ]
    disable_cmds = [
        create_swaymsg_output_command(name, config["disable"])
        for name in to_disable
    ]
    scale = MONITOR_SCALE[MONITORS[value]]
    enable_cmd = create_swaymsg_output_command(
        MONITORS[value], config[value].format(scale=scale)
    )
    all_cmds = disable_cmds + [enable_cmd]
    for cmd in all_cmds:
        print(cmd)
    return all_cmds


all_cmds = create_single_monitor_commands(args.monitor)

for cmd in all_cmds:
    if args.dry:
        print(cmd)
    else:
        subprocess.run(cmd)
