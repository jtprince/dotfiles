#!/usr/bin/env python

import shutil
import argparse
import subprocess
from pathlib import Path

VERSION_FILE = ".python-version"
VERSION_FILE_PATH = Path(VERSION_FILE)
CWD_NAME = Path.cwd().name
DELETE_PYENV_CMD = "pyenv-virtualenv-delete"


def configure(version: str, args: argparse.Namespace):
    if args.refresh:
        if VERSION_FILE_PATH.exists():
            stated_venv = VERSION_FILE_PATH.read_text().strip()
            if stated_venv:
                venv_path = Path.home() / f".pyenv/versions/{stated_venv}"
                subprocess.run(
                    f"{DELETE_PYENV_CMD} {stated_venv}",
                    shell=True,
                    capture_output=True,
                )
                shutil.rmtree(venv_path, ignore_errors=True)
                VERSION_FILE_PATH.unlink(missing_ok=True)

    VENV_NAME = args.name if args.name else "-".join([CWD_NAME, version])
    cmd = ["pyenv", "virtualenv", version, VENV_NAME]
    subprocess.run(cmd, check=False)

    if not args.no_python_version:
        Path(VERSION_FILE).write_text(VENV_NAME)


def get_args():
    parser = argparse.ArgumentParser(description="Creates and sets the virtualenv")
    parser.add_argument(
        "version",
        help="the python version to use (e.g., 3.9.18)",
    )
    parser.add_argument(
        "--name", help=f"name of the virtualenv to use (default {CWD_NAME}-{{version}})"
    )
    parser.add_argument(
        "--no-python-version",
        action="store_true",
        help=str(
            "do not automatically create and populate " f"the {VERSION_FILE} file"
        ),
    )
    parser.add_argument(
        "--refresh",
        action="store_true",
        help=str(f"delete the existing virtualenv from {VERSION_FILE} and recreate"),
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = get_args()
    configure(args.version, args)
