#!/usr/bin/env python

import dataclasses
import itertools
from collections import defaultdict
from pathlib import Path
import string

CONFIG = Path.home() / ".config/sway/config"


MOD1 = "mod1"  # (Alt Key)
MOD4 = "mod4"  # (Windows Key)
META = "meta"
CTRL = "ctrl"
SHIFT = "shift"

MODIFIERS = (CTRL, MOD4, SHIFT)

# /usr/include/x11/keysymdef.h is the source of truth on key symbols

# Keys that pressing alone can be used to trigger a special cmd
MAPPABLE_KEYS = (
    "XF86HomePage",
    "XF86TouchpadToggle",
    "XF86AudioPlay",
    "XF86AudioMute",
    "XF86AudioLowerVolume",
    "XF86AudioRaiseVolume",
    "XF86AudioMicMute",
    "XF86AudioNext",
    "XF86AudioPrev",
    "XF86Mail",
    "XF86Documents",
    "XF86Phone",
    "XF86Display",
    "XF86Calculator",
    "XF86Sleep",
    "XF86MonBrightnessDown",
    "XF86MonBrightnessUp",
    "XF86KbdBrightnessDown",
    "XF86KbdBrightnessUp",
    "Print",
    "Scroll_Lock",
    # WARNING: Ctrl turned Pause into Break
    "Pause",
    "Menu",
)

# Left to Right using my microsoft sculpt keyboard
# Alternating using blue toggle then Fn toggle
# These are all UNSHIFTED keys (if a shift version exists)!
ALL_PRIMITIVE_KEYS = (
    *[f"F{num}" for num in range(1, 12 + 1)],  # Function Keys (e.g., F1)
    *[str(num) for num in range(0, 9 + 1)],  # numbers
    *[letter for letter in string.ascii_lowercase],  # letters
    "space",
    "Insert",
    "Home",
    "End",
    "Prior",  # PgUp
    "Next",  # PgDn
    "Up",
    "Down",
    "Left",
    "Right",
    "Escape",
    "Tab",
    "Delete",
    *MAPPABLE_KEYS,
    "grave",  # aka backtick
    "minus",
    "equal",
    "bracketleft",
    "bracketright",
    "backslash",
    "semicolon",
    "apostrophe",
    "comma",
    "period",
    "slash",
)

LOWER_TO_UPPER_KEYS = {
    "1": "!",
    "2": "@",
    "3": "#",
    "4": "$",
    "5": "%",
    "6": "^",
    "7": "&",
    "8": "*",
    "9": "(",
    "0": ")",
    "[": "{",
    "]": "}",
    ";": ":",
    "'": '"',
    ",": "<",
    ".": ">",
    "/": "?",
    "\\": "|",
    "`": "~",
    "-": "_",
    "=": "+",
    **dict(zip(string.ascii_lowercase, string.ascii_uppercase)),
}
UPPER_TO_LOWER_KEYS = {val: key for key, val in LOWER_TO_UPPER_KEYS.items()}


def all_combinations(any_list):
    return itertools.chain.from_iterable(
        itertools.combinations(any_list, i + 1) for i in range(len(any_list))
    )


ALL_UP_DOWN_SHIFTABLE_KEYS = set(LOWER_TO_UPPER_KEYS.keys()).union(
    set(LOWER_TO_UPPER_KEYS.values())
)


def get_shifted_key(key):
    if key in LOWER_TO_UPPER_KEYS:
        return LOWER_TO_UPPER_KEYS[key]
    return key


def is_shiftable(key):
    return key in LOWER_TO_UPPER_KEYS


def get_lower_key(key):
    if key in UPPER_TO_LOWER_KEYS:
        return UPPER_TO_LOWER_KEYS[key]
    return key


def compact(lst):
    return [x for x in lst if x is not None]


def partition(iterable, condition):
    trues = []
    falses = []
    for item in iterable:
        list_ = trues if condition(item) else falses
        list_.append(item)
    return trues, falses


@dataclasses.dataclass(frozen=True, slots=True, order=True)
class KeyCombo:
    """One or more keys pressed together."""

    key: str
    ctrl: bool = False
    mod1: bool = False
    mod4: bool = False
    shift: bool = False
    meta: bool = False

    ALL_MODS = (MOD4, MOD1, META, CTRL, SHIFT)

    @classmethod
    def from_chars(cls, chars: str):
        """Takes a set of keys joined with '+'."""
        keys = chars.split("+")
        kwargs = dict(
            (
                (key.lower(), True)
                if key.lower() in cls.ALL_MODS
                else ("key", cls._down_shift_key(key))
            )
            for key in keys
        )
        return cls(**kwargs)

    @staticmethod
    def _down_shift_key(key):
        return get_lower_key(key)

    def __str__(self):
        mods = [mod.capitalize() for mod in self.ALL_MODS if getattr(self, mod)]
        return "+".join([*mods, self.key])


@dataclasses.dataclass(frozen=True, slots=True)
class KeyBinding:
    key_combo: KeyCombo
    command: str
    locked: bool = False
    exec: bool = False
    no_startup_id: bool = False

    @classmethod
    def from_line_parts(cls, line: list[str]):
        line = line[1:]
        locked = False
        if line[0] == "--locked":
            line = line[1:]
            locked = True
        key_combo = KeyCombo.from_chars(line.pop(0))

        exec = False
        if line[0] == "exec":
            line.pop(0)
            exec = True

        no_startup_id = False
        if line[0] == "--no-startup-id":
            line.pop(0)
            no_startup_id = True

        command = " ".join(line)

        return cls(
            key_combo=key_combo,
            command=command,
            locked=locked,
            exec=exec,
            no_startup_id=no_startup_id,
        )

    def command_type(self):
        """Something like 'exec', 'move', 'workspace', etc."""
        return self.command[0]

    def is_executable(self):
        return self.command_type == "exec"

    def __str__(self):
        return f'<{str(self.key_combo)}, "{self.command}">'

    __repr__ = __str__


# Bindings that already exist on sculpt keyboard but not set in sway
PRESET_KEY_COMBOS = {
    "AltTab": KeyCombo(key="Tab", mod1=True),
    "WorkSpaceLeft": KeyCombo(key="Left", ctrl=True, mod1=True),
    "WorkSpaceRight": KeyCombo(key="Right", ctrl=True, mod1=True),
    "Search": KeyCombo(key="XF86TouchpadToggle", mod1=True, shift=True),
    "Reload": KeyCombo(key="XF86TouchpadToggle", mod1=True, mod4=True),
    "CtrlAltTouchpadToggle": KeyCombo(key="XF86TouchpadToggle", mod1=True, ctrl=True),
    "Settings": KeyCombo(key="XF86TouchpadToggle", mod1=True),
    # At some point, should add in a Super R (i.e., "Meta") key to my keyboard
    # Could either use keyd https://github.com/rvaiya/keyd
    # Or https://www.reddit.com/r/swaywm/comments/156wsoe/remap_the_right_alt_key_to_behave_like_a_second/
    # This would let me access a whole other set of bindings
    # For now, let's just egnore the F5 key
    # 🔍 F5: Shift_L+Meta_L+XF86TouchpadToggle
}


def mod_combo_includes_shift_and_no_mod4(mod: tuple[str]) -> bool:
    has_shift = any(modifier for modifier in mod if modifier == SHIFT)
    has_alt = any(modifier for modifier in mod if modifier == MOD4)
    return has_shift and not has_alt


@dataclasses.dataclass()
class SwayConfig:
    MY_MOD_NAMES = {"Mod4": "Alt"}
    VALID_MOD_COMBOS = (
        (MOD4,),
        (SHIFT,),
        (SHIFT, CTRL),
        (CTRL, MOD4),
        (SHIFT, MOD4),
        (CTRL, SHIFT, MOD4),
    )

    # A dict of sway variables (e.g., "$mod" -> "Mod4"
    definitions: dict[str, str]
    key_bindings: list[KeyBinding]

    @classmethod
    def from_path(cls, path: Path = CONFIG):
        lines = path.read_text().strip().split("\n")
        definitions, otherlines = cls.get_definitions(lines)
        key_bindings = cls.get_key_bindings(otherlines, definitions)
        return cls(definitions=definitions, key_bindings=key_bindings)

    @classmethod
    def get_definitions(cls, lines):
        setlines, otherlines = partition(lines, lambda line: line.startswith("set "))
        definitions = dict(line.strip().split(None, 2)[1:3] for line in setlines)
        return (definitions, otherlines)

    @staticmethod
    def _binding_from_line(line: str, definitions: dict[str, str]) -> KeyBinding | None:
        parts = line.strip().split()
        if not parts or (parts[0] != "bindsym"):
            return None
        for key, val in definitions.items():
            parts = list(
                itertools.chain.from_iterable(
                    part.replace(key, val).split() for part in parts
                )
            )
        return KeyBinding.from_line_parts(parts)

    @classmethod
    def get_key_bindings(cls, lines: list[str], definitions: dict):
        return compact([cls._binding_from_line(line, definitions) for line in lines])

    @classmethod
    def get_all_possible_key_combos(cls):
        """At least the combos I want to consider."""
        all_key_combos = []

        for key in ALL_PRIMITIVE_KEYS:

            if key in MAPPABLE_KEYS:
                all_key_combos.append(KeyCombo.from_chars(key))

            for mod_combo in cls.VALID_MOD_COMBOS:
                if is_shiftable(key):
                    if mod_combo_includes_shift_and_no_mod4(mod_combo):
                        continue
                all_key_combos.append(KeyCombo.from_chars("+".join([*mod_combo, key])))

        return all_key_combos

    def display_annotated_bindings(self):
        all_possible_key_combos = self.get_all_possible_key_combos()
        key_bindings_by_key_combo = {
            binding.key_combo: binding for binding in self.key_bindings
        }
        for combo, binding in key_bindings_by_key_combo.items():
            if combo not in all_possible_key_combos:
                raise RuntimeError(
                    f"Bad config since {str(combo)} not found in all_possible_key_combos!"
                )

        key_combos_by_key = defaultdict(list)
        for key_combo in all_possible_key_combos:
            key_combos_by_key[key_combo.key].append(key_combo)

        for key, key_combos in key_combos_by_key.items():
            print(f"{key} ==========================")
            for possible_key_combo in key_combos:
                prefix = "[ ]"
                command = ""
                if possible_key_combo in key_bindings_by_key_combo:
                    prefix = "[*]"
                    command = key_bindings_by_key_combo[possible_key_combo].command
                print(" ".join([prefix, str(possible_key_combo), command]))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    # parser.add_argument()
    args = parser.parse_args()

    config = SwayConfig.from_path(CONFIG)
    config.display_annotated_bindings()
