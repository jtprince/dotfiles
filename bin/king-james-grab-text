#!/usr/bin/env python

import requests
import re
import argparse
import pyperclip

BIBLE_API_BASE_URL = "https://bible-api.com/"
DEFAULT_VERSION = "kjv"


def _parse_bible_reference(reference):
    """
    Parses a Bible reference string like 'Genesis 28:12-13' or '1 Corinthians 13:12'
    and returns a tuple (book, chapter, verse_start, verse_end).
    Handles various spacing, punctuation, and formats.
    """
    reference = " ".join(reference.split())

    # Regular expression to capture book, chapter, and verse range
    match = re.match(r"([1-3]?\s?\w+)\s+(\d+):(\d+)(?:-(\d+))?", reference)

    if not match:
        raise ValueError("Invalid Bible reference format")

    book = match.group(1)  # Book name
    chapter = int(match.group(2))  # Chapter number
    verse_start = int(match.group(3))  # Starting verse
    verse_end = (
        int(match.group(4)) if match.group(4) else verse_start
    )  # Ending verse or same as start

    return book, chapter, verse_start, verse_end


def _lookup_bible_verse(
    book, chapter, verse_start, verse_end=None, version=DEFAULT_VERSION
):
    """
    Fetches the Bible verse(s) from the API given the book, chapter, and verse range.
    """

    # Construct the verse range part of the URL
    if verse_end and verse_end != verse_start:
        verse_range = f"{book} {chapter}:{verse_start}-{verse_end}"
    else:
        verse_range = f"{book} {chapter}:{verse_start}"

    # Append version (KJV) to the URL
    url = f"{BIBLE_API_BASE_URL}{verse_range}?translation={version}"

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if "text" in data:
                return data["text"]
            else:
                return "No text found for this reference."
        else:
            return (
                f"Error: Unable to retrieve data (status code {response.status_code})"
            )

    except requests.exceptions.RequestException as e:
        return f"An error occurred: {str(e)}"


def parse_reference_and_get_bible_text(version, reference, verbose: bool = False):
    try:
        book, chapter, verse_start, verse_end = _parse_bible_reference(reference)
        if verbose:
            verses = [verse_start]
            if verse_end != verse_start:
                verses.append(verse_end)

            verses_str = "-".join(map(str, verses))
            print(f"{book} {chapter}:{verses_str}")
        return _lookup_bible_verse(book, chapter, verse_start, verse_end)

    except ValueError as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="grab KJV text from bible verse")
    parser.add_argument(
        "--version",
        default=DEFAULT_VERSION,
        help="see https://bible-api.com for valid codes",
    )
    parser.add_argument(
        "reference",
        nargs="?",
        help="something like 'Matthew 4:1-2'; if not given tries clipboard (ctrl-c one)",
    )
    parser.add_argument(
        "--print-reference",
        action="store_true",
        help="print out the formal reference on line before the text",
    )

    args = parser.parse_args()
    reference = args.reference if args.reference else pyperclip.paste()

    text = parse_reference_and_get_bible_text(
        version=args.version, reference=reference, verbose=args.print_reference
    )
    text = " ".join(text.split("\n"))
    print(text)

    if not args.reference:
        pyperclip.copy(text.strip())
        print("[copied text to clipboard!]")
