#!/usr/bin/env python

import subprocess
import argparse

import re

parser = argparse.ArgumentParser()
parser.add_argument("--quiet", action='store_true', help="quiet")
args = parser.parse_args()

class ColoredPrint:
    def __init__(self):
        self.PINK = '\033[95m'
        self.OKBLUE = '\033[94m'
        self.OKGREEN = '\033[92m'
        self.WARNING = '\033[93m'
        self.FAIL = '\033[91m'
        self.ENDC = '\033[0m'
        self.BOLD = '\33[1m'

    def disable(self):
        self.PINK = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.BOLD = ''
        self.ENDC = ''

    def success(self, *args, **kwargs):
        print(self.OKGREEN + self.BOLD + ' '.join(map(str, args)) + self.ENDC, **kwargs)
    def info(self, *args, **kwargs):
        print(self.OKBLUE + ' '.join(map(str, args)) + self.ENDC, **kwargs)
    def warn(self, *args, **kwargs):
        print(self.WARNING + self.BOLD + ' '.join(map(str, args)) + self.ENDC, **kwargs)
    def err(self, *args, **kwargs):
        print(self.FAIL + ' '.join(map(str, args)) + self.ENDC, **kwargs)
    def pink(self, *args, **kwargs):
        print(self.PINK + ' '.join(map(str, args)) + self.ENDC, **kwargs)


version_re = re.compile(r'version (\d+\.\d+.\d+[^\s]*) ')

def run_shell_cmd(cmd):
    """Runs command in shell, returns text and removes newlines."""
    return subprocess.check_output(cmd, shell=True, text=True).strip()

output = run_shell_cmd("file /boot/vmlinuz*")
match = version_re.search(output)
if match:
    compiled_version = match.group(1)

running_version = run_shell_cmd("uname -r")

colored_print = ColoredPrint()

if not args.quiet:
    print(f"üèÉ {running_version}")
    print(f"üìï {compiled_version}")

if compiled_version == running_version:
    colored_print.success("\nNo boot needed.")
else:
    colored_print.warn("\nBoot required.")
