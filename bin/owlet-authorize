#!/usr/bin/env python


import sys
import requests
import argparse
from pathlib import Path

#############################
# CONFIG
#############################
BASE_DIR = Path.home() / "Dropbox/env/work/owlet/secrets/firebase"

# files under BASE_DIR/<env>
files = dict(
    email="email",
    user_uid="user_uid",
    password="password",
    apikey="apikey",
)

default_env = "dev"

DO_NOT_DISPLAY = ["password", "apikey"]
#############################


def get_file_contents(env_path, name):
    return (env_path / name).read_text().strip()


URL = "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword"

CACHE_DIR = Path.home() / ".cache/owlet"
CACHE_DIR.mkdir(exist_ok=True)

parser = argparse.ArgumentParser(description="prints the token with no newline")
parser.add_argument("env", nargs="?", default=default_env, help="environment")
parser.add_argument(
    "--list", action="store_true", help="print possible envs and exit"
)
parser.add_argument(
    "-u", "--user-dir", default="default", help="name of dir for the user"
)
parser.add_argument(
    "-a", "--all", action="store_true", help="display all user info"
)
parser.add_argument(
    "-e",
    "--export",
    action="store_true",
    help="display export statements (implies --all)",
)
args = parser.parse_args()
if args.export:
    args.all = True


if args.list:
    dirs = [path for path in BASE_DIR.glob("*") if path.is_dir()]
    print(f"Possible envs: (under {str(BASE_DIR)})")
    for path in dirs:
        print("    " + path.name)
    exit(0)


env_path = BASE_DIR / args.env / args.user_dir

data = {
    key: (env_path / filename).read_text().strip()
    for key, filename in files.items()
}

body = dict(
    email=data["email"],
    password=data["password"],
    returnSecureToken=True,
)
params = dict(key=data["apikey"])

response = requests.post(URL, json=body, params=params)

token = response.json()["idToken"]

if args.all:
    token_key = "token" if args.export else "Authorization"
    display_data = data | {token_key: token}
    for key in DO_NOT_DISPLAY:
        display_data.pop(key)
    for key, val in display_data.items():
        if args.export:
            print(f"export {key.upper()}='{val}'")
        else:
            print(f"{key}: {val}")
else:
    print(token, end="")
