#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

# can bump version up when dev boxes acquire python 3

import argparse
import os
import re
import subprocess
import sys
from contextlib import contextmanager
import inspect
from collections import namedtuple
from termcolor import colored as color
from joblib import Parallel, delayed

from os.path import expanduser

class Action(object):
    def __init__(self, request, response=None):
        self.request = request
        self.response = response

def process(path, actions, remote):
    repo = GitRepo(path, remote)
    for action in actions:
        repo.run_and_log(action)
    return repo

class GitRepo(object):
    NOT_ACTIONS = ['run_and_log', 'sys', 'actions', '__init__']

    @classmethod
    def actions(cls):
        methods = [name for (name, _) in inspect.getmembers(cls, predicate=inspect.ismethod)]
        return [method for method in methods if method not in cls.NOT_ACTIONS]

    def __init__(self, path, remote=None):
        self.remote = remote
        self.path = os.path.abspath(path)
        os.chdir(self.path)
        self.name = os.path.basename(self.path)
        self.actions = []

    def run_and_log(self, action):
        action.response = getattr(self, action.request)()
        self.actions.append(action)

    def sys(self, string):
        return subprocess.check_output(string.split(' ')).decode('utf-8').strip()

    def status(self):
        uptodate = color('✔', 'green') if self.is_uptodate() else color('✘', 'red')
        return "({}{})".format(self.current_branch(), uptodate)

    def is_uptodate(self):
        uptodate_str = "is up-to-date with"
        reply = self.sys("git status -uno")
        return uptodate_str in reply

    def bring_remotes_uptodate(self):
       return self.sys("git remote update --prune")

    def current_branch(self):
        return self.sys("git rev-parse --abbrev-ref HEAD")

    def pull(self):
        if not self.is_uptodate():
            return self.sys("git pull")
        else:
            return 'already up-to-date'

    def has_remote(self):
        lines = self.sys("git branch -a").split("\n")
        for line in lines:
            if ("remotes/origin/" + self.remote) in line:
                return True

    def checkout_remote(self):
        if self.has_remote():
            return self.sys("git co {}".format(self.remote))


@contextmanager
def cd(path):
    old_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(old_dir)

def get_immediate_git_repos(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

rootdir = '/home/build'
kernel_release = subprocess.check_output(['uname', '-r']).decode('utf-8').strip()
if re.search(r'-ARCH$', kernel_release):
   rootdir = expanduser("~") + '/dev'

parser = argparse.ArgumentParser(description="check git branch status and more", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--root", default=rootdir, help="where to begin looking")
# parser.add_argument("-c", "--checkout", help="checkout a branch on repos where it exists")
parser.add_argument("--remote", help='the remote branch to deal with')
parser.add_argument("actions", nargs="*", help='actions to perform', default=['status'])
parser.add_argument("--list", action='store_true', help="list available actions and exit")
#parser.add_argument("--has-remote", help="display repos with that remote branch")
#parser.add_argument("--co-remote", help="checkout the remote branch if it exists")
#parser.add_argument("--cmd", help="execute an arbitrary command in git repos")

args = parser.parse_args()

if args.list:
    print("\n".join(GitRepo.actions()))
    exit(2)

actions = []
for action in args.actions:
    actions.append(Action(action))

with cd(args.root):
    git_dirs = [os.path.abspath(fn) for fn in os.listdir(".") if os.path.isdir(fn) and os.path.exists(os.path.join(fn, ".git"))]

repos = Parallel(n_jobs=len(git_dirs))(delayed(process)(dir, actions, args.remote) for dir in git_dirs)

for repo in repos:
    for action in repo.actions:
        if action.request == 'status':
            sys.stdout.write(action.response)
            print(" " + repo.name)
        else:
            print(repo.name)
            print("    {}: {}".format(action.request, action.response))
