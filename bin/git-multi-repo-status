#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

# can bump version up when dev boxes acquire python 3

import argparse
import os
import re
import subprocess
import sys
from contextlib import contextmanager

from os.path import expanduser


class GitRepo(object):

    def __init__(self):
        self.root = os.getcwd()
        self.name = os.path.basename(self.root)
        self.bring_remotes_uptodate()

    def bring_remotes_uptodate(self):
       self.sys("git remote update --prune")

    def sys(self, string):
        return subprocess.check_output(string.split(' ')).decode('utf-8').strip()

    def is_uptodate(self):
        uptodate_str = "is up-to-date with"
        reply = self.sys("git status -uno")
        return uptodate_str in reply

    def current_branch(self):
        return self.sys("git rev-parse --abbrev-ref HEAD")

    def pull(self):
        return self.sys("git pull")

    def has_remote(self, branch):
        lines = self.sys("git branch -a").split("\n")
        for line in lines:
            if ("remotes/origin/" + branch) in line:
                return True

@contextmanager
def cd(path):
    old_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(old_dir)

def get_immediate_git_repos(a_dir):
    return [name for name in os.listdir(a_dir)
            if os.path.isdir(os.path.join(a_dir, name))]

rootdir = '/home/build'
kernel_release = subprocess.check_output(['uname', '-r']).decode('utf-8').strip()
if re.search(r'-ARCH$', kernel_release):
   rootdir = expanduser("~") + '/dev'

parser = argparse.ArgumentParser(description="check git branch status and more", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--root", default=rootdir, help="where to begin looking")
# parser.add_argument("-c", "--checkout", help="checkout a branch on repos where it exists")
parser.add_argument("-p", "--pull", action="store_true", help="pull from origin")
parser.add_argument("--has-remote", help="display repos with that remote branch")
parser.add_argument("--co-remote", help="checkout the remote branch if it exists")
parser.add_argument("--cmd", help="execute an arbitrary command in git repos")

args = parser.parse_args()

with cd(args.root):
    print("looking for git repos in root project dir: {}".format(args.root))
    subdirectories = [fn for fn in os.listdir(".") if os.path.isdir(fn)]
    for dir in subdirectories:
        with cd(dir):
            if os.path.exists(".git"):
                sys.stdout.write("--> %s " % dir)
                repo = GitRepo()
                repo_is_not_diff = repo.is_uptodate()
                repo_is_uptodate = repo_is_not_diff

                ## pull
                if not repo_is_uptodate and args.pull:
                    repo.pull()
                    print("pulling on << {} >>".format(repo.name))

                if args.cmd:
                    reply = repo.sys(args.cmd)
                    print(reply)

                if args.co_remote:
                    if repo.has_remote(args.co_remote):
                        repo.sys("git co {}".format(args.co_remote))

                if args.has_remote:
                    if repo.has_remote(args.has_remote):
                        print("{} has remote branch {}".format(repo.name, args.has_remote))
                else:
                    ## status
                    uptodate = '✔' if repo.is_uptodate() else '✘'
                    print("({}{}) {}".format(repo.current_branch(), uptodate, repo.name))
