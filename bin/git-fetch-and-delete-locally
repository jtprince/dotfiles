#!/usr/bin/env python

REMOTE_PREFIX = "remotes/origin"


from collections import defaultdict
import argparse
import re
import subprocess


DEFAULT_MAIN_BRANCH = subprocess.check_output(["git-main-branch"], text=True).strip()

parser = argparse.ArgumentParser()
parser.add_argument(
    "-f",
    "--force",
    action="store_true",
    help="force deletion of branches not fully merged",
)
parser.add_argument(
    "-b",
    "--main-branch",
    default=DEFAULT_MAIN_BRANCH,
    help=f"main branch to use, default: {DEFAULT_MAIN_BRANCH}",
)
args = parser.parse_args()


def clean_lines(string, no_leading_star=True, no_leading_space=True):
    """Returns git star output as a list."""
    lines = [line.rstrip() for line in string.split("\n")]
    if no_leading_star:
        lines = [re.sub(r"^\s*\*", " ", line) for line in lines]

    if no_leading_space:
        lines = [re.sub(r"^\s+", "", line) for line in lines]

    return lines


def is_remote(branch):
    """Is the the branch remote?"""
    return branch.startswith(REMOTE_PREFIX)


def run(command, print_cmd=False, print_response=False, dry=False):
    """Run a command in the shell."""
    if print_cmd:
        print(f"running: {command}")
    if dry:
        _response = "<dry run>"
    else:
        _response = subprocess.getoutput(command)
    if print_response:
        print(_response)
    return _response


def group_by(func, values) -> dict:
    """Groups values by func."""
    groups = defaultdict(list)
    for value in values:
        groups[func(value)].append(value)
    return dict(groups)


run("git fetch -p")
run(f"git checkout {args.main_branch}")
run("git pull")

branches = clean_lines(run("git branch -a"))

branch_name_groups = group_by(lambda branch_: branch_.split("/")[-1], branches)


deleted = 0
for branch_name, branches in branch_name_groups.items():
    if (len(branches) == 1) and (not is_remote(branches[0])):
        deleted += 1
        branch_ = branches[0]
        delete_opt = "-D" if args.force else "-d"
        response = run(
            f"git branch {delete_opt} {branch_}",
            print_cmd=True,
            print_response=True,
        )
        if "not fully merged" in response:
            # if it is not merged, then we'll force delete IFF equivalent to
            # remote master
            remote = f"origin/{args.main_branch}"
            response = run(
                f"git diff {remote}", print_cmd=True, print_response=True
            )
            if not response:
                print(f"No difference between local branch and {remote}")
                print("So, going to force delete local branch")
                response = run(
                    f"git branch -D {branch_}",
                    print_cmd=True,
                    print_response=True,
                )
    else:
        ...
        # print(f"'{branches[0]}' has remote '{branches[-1]}'")


if deleted == 0:
    print("<< No local branches without a remote. >>")
