#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'shellwords'
require 'fileutils'

LIKE_CHEESE = [
  "say 茄子[eggplant]",
  "say pickles",
  "Sig ‘appelsin",
  "käsekuchen",
  "sei,
  no",
  "kimchi",
  "säg ‘omelett",
  "say سیب[apple]",
  "pepsi",
  "beanjack"
]

def printv(*args)
  print *args if $VERBOSE
end

def putsv(*args)
  puts *args if $VERBOSE
end

viewers = {
  'g' => 'geeqie',
  'e' => 'eog',
  'i' => 'inkscape',
  'm' => 'gimp',
}

get_window_id = {
  window: -> { `xwininfo`[/Window id\:\s+(\w+)\s+/, 1] },
  active: -> { `xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)"`.split(/\s+/).last },
  root: -> { 'root' }
}

viewers_bold_string = viewers.map do |letter,app|
  app.sub(letter, "\033[1m\033[31m" + letter + "\033[0m")
end.join('|')

opt = OpenStruct.new( window: :root )
parser = OptionParser.new do |op|
  op.banner = "usage: #{File.basename(__FILE__)} [OPTS] filename[.png]"
  op.separator "output: filename.png [by default captures entire screen]"
  op.separator "filename may be omitted if you open/print"
  op.separator ""
  op.on("-d", "--delay <sec>", Integer, "delay that many seconds (Int)") {|v| opt.delay = v }
  op.on("-a", "--active", "capture the active window") { opt.window = :active }
  op.on("-b", "--box", "draw a box to capture") { opt.window = :box }
  op.on("-w", "--window", "select a window to capture") { opt.window = :window }
  op.on("-o", "--open <s>", viewers_bold_string) {|v| opt.open = viewers[v] || v }
  op.on("-p", "--print", "print file directly with lp") {|v| opt.print = v }
  op.on("--dir <s>", "save to this directory") {|v| opt.dir = v }
  op.on("--timestamp", "add a date/time stamp to filename") {|v| opt.timestamp = v }
  op.on("-v", "--verbose", "talk about it") {|v| $VERBOSE = 3 }
end
parser.parse!

def write_tmpfile?(argv, opt)
  argv.size == 0 && (opt.print || opt.open)
end

filename_needed = !write_tmpfile?(ARGV, opt)

if ARGV.size == 0 && filename_needed
  puts parser
  exit
end

### TODO: implement ability to optionally enter filename on open or print (use tmpfile)

filename = ARGV.shift
filename += ".png" unless filename[/\.png/i]

TIME_STAMP_FORMAT = "%Y-%m-%d--%H-%M-%S"
if opt.timestamp
  ext = File.extname(filename)
  base = filename.chomp(ext)
  filename = base + "-" + Time.now.strftime(TIME_STAMP_FORMAT) + ext
end
filename_esc = Shellwords.escape(filename)

if opt.delay
  printv "Action in "
  opt.delay.downto(1) do |cnt|
    printv "#{cnt}.. "
    sleep(1)
  end
  putsv LIKE_CHEESE.sample + "!"
end

# create the command
cmd_parts = ["import"]
unless opt.window == :box
  cmd_parts << "-window" << get_window_id[opt.window].call
end
cmd_parts << filename_esc
cmd = cmd_parts.join(' ')

dir = (opt.dir && File.expand_path(opt.dir) ) || Dir.pwd
FileUtils.mkpath(dir) unless File.exist?(dir)

Dir.chdir(dir) do
  system cmd

  if opt.print
    system "lp #{filename_esc}"
  end

  if opt.open
    sleep(0.1)
    open_cmd = "#{opt.open} #{filename_esc} &"
    putsv open_cmd
    system open_cmd
  end
end

