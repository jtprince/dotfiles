#!/usr/bin/env python

from subprocess import run
import argparse
from pathlib import Path
import shutil
import dataclasses

HOME = Path.home()
REPO_CONFIG = (Path(__file__).resolve().parent.parent / "config").resolve()
HOME_CONFIG = HOME / ".config"
CLOUD_ENV = HOME / "MEGA" / "env"
DOT_LOCAL = HOME / ".local"

# TODO: rip out config data into separate yaml file


@dataclasses.dataclass(frozen=True)
class Symlink:
    destination: Path
    link: Path


class Symlinker:
    def __init__(self, dry=False):
        self.dry = dry

    def ensure_links(self, symlinks: list[Symlink]):
        """Takes a list of symlinks and ensures the link."""
        for symlink in symlinks:
            self.ensure_link(symlink)

    def ensure_link(self, symlink: Symlink):
        resolved_path = symlink.link.resolve()
        if symlink.link.is_symlink():
            if resolved_path == symlink.destination.resolve():
                # The link already exists! Nothing to do.
                print(f"Exists: {symlink.link} -> {symlink.destination}")
                return
            else:
                print(f"Removing existing link: {symlink.link}")
                if not self.dry:
                    symlink.link.unlink()
        else:
            # A resolved path sits where our link should be. Remove it.
            if symlink.link.exists():
                print(f"Removing real path: {symlink.link}")
                if not self.dry:
                    if symlink.link.is_dir():
                        shutil.rmtree(symlink.link)
                    else:
                        symlink.link.unlink()

        print(f"Creating: {symlink.link} -> {symlink.destination}")
        if not self.dry:
            symlink.link.symlink_to(symlink.destination)

    def ensure_dirs(self, dirs: list[Path]):
        """Ensure that each home has been made or exists."""
        for name in dirs:
            self._make_dir(name)

    def softlink_into_dotconfig(self, filenames: list[str]):
        for name in filenames:
            self.ensure_link(
                Symlink(REPO_CONFIG / name, link=HOME_CONFIG / name)
            )

    def softlink_into_home(self, filenames):
        for name in filenames:
            self.ensure_link(
                Symlink(REPO_CONFIG / name, link=HOME / ("." + name))
            )

    def _make_dir(self, name):
        """Make a directory relative to home dir."""
        path = HOME / name
        print(f"Ensuring: {path}")
        if not self.dry:
            path.mkdir(parents=True, exist_ok=True)


# relative to ~/
ENSURE_DIRS = [
    "npm",
    ".local/share/applications",
]

# These are softlinked in ~/.config
SOFTLINK_INTO_CONFIG = [
    "sway",
    "mako",
    "alias",
    "xmodmap",
    "git",
    "gtk-3.0",
    "zsh",
    "fontconfig",
    "texlive",
    "dunst",
    "xava",
    "latex",
    "conky",
    "blockify",
    "mypy",
    "ranger",
    "picom",
    "alacritty",
    "isort.cfg",
    "cheat",
    "flake8",
    "ackrc",
    "pylintrc",
    "pulse",
    "i3",
    "npmrc",
    "pulseaudio-ctl",
    "nvim",
    "sheldon",
    "mimeapps.list",
    "Xresources.d",
]

# Softlink into home dotfile as "$HOME/.{name}"
SOFTLINK_INTO_HOME = [
    "pryrc",
    "irbrc",
    "gemrc",
    "docker",
    "profile",
    "xprofile",
    "gtkrc-2.0",
]

# full path on the left to full path on the right
RESOLUTION_INDEPENDENT_LINKS = [
    Symlink(CLOUD_ENV / "gpg/dot-gnupg", link=HOME / ".gnupg"),
    Symlink(
        CLOUD_ENV / "cloud-and-apis/slack-term",
        link=HOME_CONFIG / "slack-term",
    ),
    Symlink(
        REPO_CONFIG / "mimeapps.list",
        link=DOT_LOCAL / "share/applications/mimeapps.list",
    ),
    Symlink(
        REPO_CONFIG / "mimeapps.list",
        link=HOME_CONFIG / "mimeapps.list",
    ),
    # ensure use chrome with wayland flags and that always opens a new window
    # set to be the generic chrome .desktop
    Symlink(
        REPO_CONFIG / "applications/google-chrome-wayland-newwindow.desktop",
        link=DOT_LOCAL / "share/applications/google-chrome.desktop",
    ),
    Symlink(
        REPO_CONFIG / "pandoc/reference",
        link=DOT_LOCAL / "share/pandoc",
    ),
    Symlink(REPO_CONFIG / "zsh/zshenv", link=HOME / ".zshenv"),
    Symlink(HOME / "src/cheatsheets", link=HOME_CONFIG / "cheat/cheatsheets/community")
]

_RESOLUTIONS = ["4k", "hd"]
parser = argparse.ArgumentParser(description="setup all config dotfiles")
parser.add_argument(
    "-r",
    "--resolution",
    default="hd",
    choices=_RESOLUTIONS,
    help="resolution to use (default hd)",
)
parser.add_argument("--dry", action="store_true", help="say it, don't do it")
args = parser.parse_args()

linker = Symlinker(dry=args.dry)


def create_resolution_dependent_links(resolution: str):
    xresources_path = REPO_CONFIG / f"Xresources-{resolution}"
    return [
        Symlink(xresources_path, link=HOME / ".Xresources"),
        Symlink(xresources_path, link=HOME / ".Xdefaults"),
        Symlink(
            REPO_CONFIG / f"gtkrc-2.0-{resolution}",
            link=HOME / ".gtkrc-2.0-local",
        ),
    ]


resolution_dependent_links = create_resolution_dependent_links(args.resolution)


if __name__ == "__main__":
    linker.ensure_dirs(ENSURE_DIRS)
    linker.softlink_into_dotconfig(SOFTLINK_INTO_CONFIG)
    linker.softlink_into_home(SOFTLINK_INTO_HOME)
    linker.ensure_links(RESOLUTION_INDEPENDENT_LINKS)
    linker.ensure_links(resolution_dependent_links)
