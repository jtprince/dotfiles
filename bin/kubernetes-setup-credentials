#!/usr/bin/env python

import dataclasses
import subprocess

import argparse


def run(cmd, args):
    print("Running:")
    print("    ", cmd)
    if not args.dry:
        subprocess.run(cmd, shell=True)


parser = argparse.ArgumentParser()
parser.add_argument(
    "--with-login", action="store_true", help="`gcloud auth login` first"
)
parser.add_argument(
    "--credentials", action="store_true", help="grab credentials"
)
parser.add_argument(
    "--nicknames", action="store_true", help="setup nicknames"
)
parser.add_argument(
    "--dry", action="store_true", help="just say what you'll do"
)
args = parser.parse_args()

if args.with_login:
    run("gcloud auth login")

BACKEND = "backend"
PLATFORM = "platform"

DEV = "dev"
BETA = "beta"
STAGING = "staging"
PROD = "prod"
PROD_EU = "prod-eu"

STAGES = [
    DEV,
    BETA,
    STAGING,
    PROD,
    PROD_EU,
]

US_CENTRAL1 = "us-central1"
US_CENTRAL1_A = "us-central1-a"
EU_WEST1 = "europe-west1"
EU_WEST1_B = "europe-west1-b"

REGIONS = {
    (DEV, PLATFORM): US_CENTRAL1,
    (BETA, PLATFORM): US_CENTRAL1,
    (STAGING, PLATFORM): US_CENTRAL1,
    (PROD, PLATFORM): US_CENTRAL1,
    (PROD_EU, PLATFORM): EU_WEST1,
    (DEV, BACKEND): US_CENTRAL1_A,
    (BETA, BACKEND): US_CENTRAL1,  # <- note not 1_A
    (STAGING, BACKEND): US_CENTRAL1_A,
    (PROD, BACKEND): US_CENTRAL1_A,
    (PROD_EU, BACKEND): EU_WEST1_B,  # <-> note 1_B
}


@dataclasses.dataclass(frozen=True)
class Configuration:
    stage: str
    cluster: str
    region: str

    PREFIX = "owletcare"

    @property
    def project(self):
        return "-".join([self.PREFIX, self.stage])

    def is_backend(self):
        return cluster == BACKEND

    @property
    def nickname(self):
        suffix_list = ["be"] if self.is_backend() else []
        return "-".join([self.stage] + suffix_list)

    def get_credentials(self, args):
        run(
            "gcloud container clusters get-credentials "
            f"{self.cluster} --project {self.project} --region {self.region}",
            args
        )

    def setup_kubectx_nickname(self, args):
        run(
            f"kubectx {self.nickname}=gke_{self.project}_{self.region}_{self.cluster}",
            args
        )


for (stage, cluster), region in REGIONS.items():
    config = Configuration(stage, cluster, region)
    if args.credentials:
        config.get_credentials(args)
    if args.nicknames:
        config.setup_kubectx_nickname(args)
