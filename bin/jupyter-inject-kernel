#!/usr/bin/env python

import argparse
import subprocess
from pathlib import Path


def install_kernel(name):
    subprocess.run(f"python -m ipykernel install --user --name={name}", shell=True)


parser = argparse.ArgumentParser(
    description="inject current python into jupyter as a kernel"
)
args = parser.add_argument(
    "-p",
    "--poetry",
    action="store_true",
    help="install with poetry instead of just pip",
)
args = parser.add_argument(
    "-k",
    "--kernel",
    action="store_true",
    help="just install the kernel (assumes deps installed already)",
)


args = parser.parse_args()

try:
    env = subprocess.check_output("basename $VIRTUAL_ENV", shell=True, text=True)
except subprocess.CalledProcessError:
    version_file = Path(".") / ".python-version"
    if version_file.exists():
        env = version_file.read_text()

base_cmd = "pip install"
if args.poetry:
    base_cmd = "poetry add"

if args.kernel:
    install_kernel(env)
    exit(0)

subprocess.run(f"{base_cmd} ipykernel", shell=True)
install_kernel(env)
