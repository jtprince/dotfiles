#!/usr/bin/env python

import argparse
import subprocess
from collections import namedtuple
import sys

parser = argparse.ArgumentParser(description='ours or theirs')
parser.add_argument("-o", "--ours", action='append', help="take ours for any paths given")
parser.add_argument("-t", "--theirs", action='append', help="take theirs for any paths given")
parser.add_argument("unmatched", nargs='?', default=None, choices=['ours', 'theirs'], help='merge for those not matching with ours or theirs')
parser.add_argument("-c", "--cont", action='store_true', help='runs "git rebase --continue" if no more conflicts')

args = parser.parse_args()
if len(sys.argv) == 1:
    parser.print_help()
    exit(1)

conflicted_paths = subprocess.check_output(['git-ls-conflicted', 'unresolved']).decode('utf-8').strip().split('\n')
conflicted_paths = [path[2:] if path.startswith('./') else path for path in conflicted_paths]


def matching(conflicted_paths, pathstubs):
    """ returns ours and theirs """
    matches = []

    for conflicted_path in conflicted_paths:
        for match_path in pathstubs:
            if conflicted_path.startswith(match_path):
                matches.append(path)

    return matches


ours = matching(conflicted_paths, args.ours or [])
theirs = matching(conflicted_paths, args.theirs or [])

found = set(ours) & set(theirs)
no_matches = list(set(conflicted_paths) - found)


if args.unmatched == 'ours':
    ours.extend(no_matches)
    del no_matches[:]
elif args.unmatched == 'theirs':
    theirs.extend(no_matches)
    del no_matches[:]


for stage, paths in {'ours': ours, 'theirs': theirs}.items():
    for path in paths:
        cmd = [ 'git', 'checkout', '--' + stage, '--', path ]
        print("executing: " + " ".join(cmd))
        subprocess.call(cmd)

        cmd = [ 'git', 'add', path ]
        print("executing: " + " ".join(cmd))
        subprocess.call(cmd)

if no_matches:
    print("not resolving:")
    for path in no_matches:
        print("  " + path)
else:
    if args.cont:
        try:
            output = subprocess.check_output('git rebase --continue', shell=True)
            print(output)
        except subprocess.CalledProcessError as e:
            if "No changes - did you forget to use 'git add'?" in e.output:
                print(e.output)
                try:
                    output = subprocess.check_output('git rebase --skip', shell=True)
                except subprocess.CalledProcessError as e:
                    print(e.output)

unresolved = subprocess.check_output("git-ls-conflicted unresolved", shell=True).decode('utf-8').strip().split('\n')

if len(unresolved):
    print("UNRESOLVED: ")
    for path in unresolved:
        print(path)
else:
    print("[everything resolved]")

notadded = subprocess.check_output("git-ls-conflicted all", shell=True).decode('utf-8').strip().split('\n')

if len(notadded):
    print("NOT ADDED: ")
    for path in notadded:
        print(notadded)
else:
    print("[everything added]")

