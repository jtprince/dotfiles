#!/usr/bin/env python

import argparse
import shutil
import sqlite3
from pathlib import Path

import numpy as np


def calibrate_tdf(
    input_tdf: str,
    output_tdf: str,
    poly_coefs: list[float],
    src_table: str = "TimsScans",
    mz_column: str = "Mz",
    calibrated_column: str = "MzCalibrated",
):
    """
    Calibrate m/z values in a .tdf (SQLite) file using a polynomial function.
    Creates a new .tdf file as output. This is a simple example for demonstration;
    real Bruker TimsTOF data may require reading compressed BLOBs, etc.

    :param input_tdf: Path to the original analysis.tdf
    :param output_tdf: Path to the new calibrated TDF file that will be created
    :param poly_coefs: Polynomial coefficients (highest power first) for numpy.poly1d
    :param src_table: Name of the table containing the m/z values
    :param mz_column: Name of the column in 'src_table' storing m/z values
    :param calibrated_column: Name of the new column to store calibrated m/z
    """
    shutil.copy2(input_tdf, output_tdf)
    conn = sqlite3.connect(output_tdf)
    cursor = conn.cursor()

    poly = np.poly1d(poly_coefs)

    cursor.execute(f"PRAGMA table_info({src_table})")
    existing_cols = [row[1] for row in cursor.fetchall()]
    if calibrated_column not in existing_cols:
        raise RuntimeError(f"expected {calibrated_column} inside {src_table}")

    select_stmt = f"SELECT rowid, {mz_column} FROM {src_table}"
    cursor.execute(select_stmt)

    rows = cursor.fetchall()
    for rowid, mz_value in rows:
        if mz_value is None:
            continue
        calibrated_mz = float(poly(mz_value))
        update_stmt = f"""
            UPDATE {src_table}
            SET {calibrated_column} = ?
            WHERE rowid = ?
        """
        cursor.execute(update_stmt, (calibrated_mz, rowid))

    conn.commit()
    conn.close()


def get_args() -> argparse.Namespace:
    """
    Parses command-line arguments.

    Returns:
        argparse.Namespace: Parsed command-line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("tdf", type=Path, help="path to tdf file to manipulate")
    parser.add_argument(
        "--coefficients",
        type=float,
        nargs="+",
        help="space separated coefficients for poly1d",
    )
    parser.add_argument(
        "--suffix", default=".cal.tdf", help="suffix to use for the new tdf file"
    )
    return parser.parse_args()


# Example usage:
if __name__ == "__main__":
    args = get_args()

    calibrate_tdf(
        input_tdf="analysis.tdf",
        output_tdf="analysis.calibrated.tdf",
        poly_coefs=args.coefficients,
        src_table="TimsScans",  # Example table name
        mz_column="Mz",  # Example column name
        calibrated_column="MzCalibrated",
    )
