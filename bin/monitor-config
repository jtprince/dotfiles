#!/usr/bin/env python

from typing import Dict, Any
import argparse
import subprocess
import re
import json

MONITOR_LABEL_KEYS = ["make", "model", "serial"]
_CONFIG_FMT_STR = "enable scale {scale} pos 0 0"

LAPTOP = "laptop"
# DELL = "dell"
PHILIPS = "philips"
HP = "hp"
THINKPAD = "thinkpad"


MONITORS = {
    PHILIPS: "Philips Consumer Electronics Company PHL 278E1 0x00001684",
    # DELL: "Dell Inc. DELL S2721QS CB64M43",
    HP: "HP Inc. HP VH240a 6CM83029MD",
    LAPTOP: "California Institute of Technology 0x1401 Unknown",
    # other
    THINKPAD: "Chimei Innolux Corporation 0x1409 0x00000000",
}

WIDTH_TO_SCALE = {
    3840: "1.6",
    1920: "1.0",
}

def _make_label(monitor_data):
    """The values associated with MONITOR_LABEL_KEYS joined by a space.

    """
    return " ".join([monitor_data[key] for key in MONITOR_LABEL_KEYS])


def get_monitor_infos() -> Dict[str, Dict[str, Any]]:
    """Returns a list of make model serial strings.

    For example:

        {"Dell Inc. DELL S2721QS CB64M43": {...}, "HP ...": {...}}
    """
    monitors = json.loads(
        subprocess.check_output(["swaymsg", "-t", "get_outputs"], text=True)
    )
    return {_make_label(data): data for data in monitors}



def scale_from_data(data):
    width = data["modes"][0]["width"]
    return WIDTH_TO_SCALE.get(width, "1.0")


def create_monitor_scales(label_to_info: Dict[str, Dict[str, Any]]) -> Dict[str, str]:
    return {key: scale_from_data(data) for key, data in label_to_info.items()}


label_to_info = get_monitor_infos()
monitor_ids = list(label_to_info.keys())
monitor_scale = create_monitor_scales(label_to_info)

preferred_key = next(
    key for key, monitor_id in MONITORS.items() if monitor_id in monitor_ids
)


def get_args():
    parser = argparse.ArgumentParser(
        description=str(
            f"Defaults to {LAPTOP}. "
            "To add a monitor, "
            "`swaymsg -t get_outputs` "
            "or `swaymsg -r -t get_outputs` "
            "or `--list`"
        )
    )
    parser.add_argument(
        "monitor",
        nargs="?",
        default=LAPTOP,
        choices=[LAPTOP, PHILIPS, HP],
    )
    parser.add_argument("--list", action="store_true", help="list monitor ids")
    parser.add_argument("--dry", action="store_true", help="dry run")
    return parser.parse_args()


def create_swaymsg_output_command(id, config_str):
    return ["swaymsg", f'output "{id}" {config_str}']


def create_single_monitor_commands(value):
    scale = monitor_scale[MONITORS[value]]
    to_disable = [
        name for monitor_keyword, name in MONITORS.items() if value != monitor_keyword
    ]
    disable_cmds = [
        create_swaymsg_output_command(name, "disable") for name in to_disable
    ]
    enable_cmd = create_swaymsg_output_command(
        MONITORS[value], _CONFIG_FMT_STR.format(scale=scale)
    )
    all_cmds = disable_cmds + [enable_cmd]
    return all_cmds


args = get_args()
if args.list:
    for key in monitor_scale.keys():
        print(key)
    exit(0)


all_cmds = create_single_monitor_commands(args.monitor)

for cmd in all_cmds:
    if args.dry:
        print(" ".join(cmd))
    else:
        subprocess.run(cmd)
