#!/usr/bin/env python

import argparse
import base64
import requests
from pathlib import Path

MY_SPOTIFY_API_DIR = Path.home() / "Dropbox/env/cloud-and-apis/spotify"
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_PLAYLIST_API_BASE = "https://api.spotify.com/v1/playlists"


def read_file(file_path):
    with open(file_path, "r") as file:
        return file.read().strip()


def get_auth_token(client_id, client_secret):
    headers = {
        "Authorization": "Basic "
        + base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()
    }
    data = {"grant_type": "client_credentials"}
    response = requests.post(SPOTIFY_AUTH_URL, headers=headers, data=data)
    response.raise_for_status()
    return response.json()["access_token"]


def fetch_playlist(playlist_id, access_token):
    playlist_url = f"{SPOTIFY_PLAYLIST_API_BASE}/{playlist_id}"
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(playlist_url, headers=headers)
    response.raise_for_status()
    return response.json()


def is_classical(artists):
    classical_keywords = [
        "Orchestra",
        "Symphony",
        "Philharmonic",
        "Choir",
        "Quartet",
        "Conductor",
    ]
    for artist in artists:
        for keyword in classical_keywords:
            if keyword in artist["name"]:
                return True
    return False


def extract_tracks(playlist_json):
    tracks = []
    for item in playlist_json["tracks"]["items"]:
        track = item["track"]
        artists = ", ".join([artist["name"] for artist in track["artists"]])
        track_info = f"{artists} - {track['name']}"

        if is_classical(track["album"]["artists"]):
            performers = ", ".join(
                [artist["name"] for artist in track["album"]["artists"]]
            )
            track_info += f" (Performers: {performers})"

        tracks.append(track_info)
    return tracks


def save_tracks_to_file(tracks, file_path):
    with open(file_path, "w") as file:
        file.write("\n".join(tracks))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--playlist-id", required=True, help="set the playlist id")
    parser.add_argument(
        "--output-file", default="playlist_tracks.txt", help="set the output file"
    )
    args = parser.parse_args()

    client_id = read_file(MY_SPOTIFY_API_DIR / "client_id.txt")
    client_secret = read_file(MY_SPOTIFY_API_DIR / "client_secret.txt")

    access_token = get_auth_token(client_id, client_secret)
    playlist_json = fetch_playlist(args.playlist_id, access_token)
    tracks = extract_tracks(playlist_json)
    save_tracks_to_file(tracks, args.output_file)


if __name__ == "__main__":
    main()
