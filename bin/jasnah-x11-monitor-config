#!/usr/bin/env python

import argparse
import re
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument(
    "monitor",
    nargs="?",
    default="laptop",
    choices=["laptop", "desk"],
)
parser.add_argument("--dry", action="store_true", help="dry run")
args = parser.parse_args()

status_line_re = re.compile(r"^([^\s]+) (disconnected|connected)")
EDP_PREFIX = "eDP"


def get_displays():
    """Returns a dict with display name as key and some info value."""
    output = subprocess.check_output("xrandr", shell=True, text=True)
    lines = output.split("\n")
    name_and_status = []
    after_status_line = False
    for line in lines:
        if (
            after_status_line
            and name_and_status[-1][-1]["status"] == "connected"
        ):
            name_and_status[-1][-1]["resolution"] = line.strip().split()[0]
            after_status_line = False
        if match := status_line_re.match(line):
            name, status = match.groups()
            name_and_status.append((name, {"status": status}))
            after_status_line = True

    return dict(name_and_status)


# A dict with display and resolution
DISPLAYS = get_displays()
EDP_NAME = next(key for key in DISPLAYS.keys() if key.startswith(EDP_PREFIX))

NON_EDP_NAME = next(
    key for key, val in DISPLAYS.items() if not key.startswith(EDP_PREFIX) and val['status'] == 'connected'
)

input_off_str = "--output {} --off"
input_on_str = "--output {} --mode {} --pos 0x0 --rotate normal"


def others_off(name):
    to_turn_off = [
        display
        for display, info in DISPLAYS.items()
        if not display.startswith(name) and info["status"] == "connected"
    ]
    return [input_off_str.format(display) for display in to_turn_off]


def make_edp_opts():
    return " ".join(
        [input_on_str.format(EDP_NAME, DISPLAYS[EDP_NAME]["resolution"])]
        + others_off(EDP_NAME)
    )


def make_first_non_edp_opts():
    return " ".join(
        [
            input_on_str.format(
                NON_EDP_NAME, DISPLAYS[NON_EDP_NAME]["resolution"]
            )
        ]
        + others_off(NON_EDP_NAME)
    )


commands = dict(
    laptop=f"xrandr {make_edp_opts()}",
    desk=f"xrandr {make_first_non_edp_opts()}",
)

cmd = commands[args.monitor]
cmd += " && keyboard-setup"
cmd += " && randomise-bkg"


if args.dry:
    print(cmd)
else:
    subprocess.run(cmd, shell=True)
