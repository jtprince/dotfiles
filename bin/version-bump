#!/usr/bin/env ruby

if ARGV.size == 0
  puts "usage: #{File.basename(__FILE__)} <major|[m]inor|[p]atch>"
  puts "effect: bumps the version number in setup.py"
  puts "expects: "
  puts "  * setup.py file in pwd"
  puts "  * version line to match: r'\\s*version='"
  exit
end

bump_type = ARGV.shift.downcase()

bump_index = 2  # 0 major, 1 minor, 2 patch
if bump_type.start_with?('p')
  puts "bumping PATCH"
  bump_index = 2
elsif bump_type == 'major'
  puts "bumping MAJOR"
  bump_index = 0
elsif bump_type.start_with?('m')
  puts "bumping MINOR"
  bump_index = 1
else
  puts "must specify patch type [p]atch | [m]inor | major"
end

lines = IO.readlines("setup.py")
version_line_index = lines.index {|line| line =~ /^\s*version=/}

lines[version_line_index].sub!(/\d+\.\d+\.\d+/) do |version_string|
  puts "   current version: #{version_string}"
  version_parts = version_string.split('.').map(&:to_i)
  version_parts[bump_index] += 1
  (bump_index + 1).upto(2) {|bi| version_parts[bi] = 0 }
  new_version = version_parts.join(".")
  puts "bumping version to: #{new_version}"
  new_version
end

File.write("setup.py", lines.join)
