#!/usr/bin/env python

import platform
import re
import subprocess
import sys

if sys.argv[1:]:
    line = " ".join(sys.argv[1:])
else:
    if platform.system() == "Darwin":
        line = subprocess.check_output(["pbpaste"]).decode().strip()
    else:
        line = subprocess.check_output(["xclip", "-p", "-o"]).decode("8859").strip()


print("SLURPING IN LINE!", line)

remove_prefixes = {"FAILED", "ERROR"}
for prefix in remove_prefixes:
    if line.startswith(prefix):
        line = line[len(prefix) :].lstrip()

if not line:
    raise ValueError("no reasonable file info to work from")

regexs = (  # noqa: W605
    "^([^\s]+)\s+\d+\s+\d+\s+\d+\%\s+(\d+)-?",  # noqa: W605
    r"^#\d+ (.*)?\((\d+)\):",
    r'E?\s*File "(.*)", line (\d+)',
    r"(.*):(\d+):(\d+):",
    r"(.*):(\d+):",
    r"(.*):(\d+)",
)

filename = line.split()[0]
linenum = None
colnum = None

for regex in regexs:
    matchobj = re.match(regex, line)
    if matchobj:
        # todo: find better way to do this
        # filename, linenum, colnum = matchobj.groups()
        captures = matchobj.groups()
        filename = captures[0]
        linenum = captures[1]
        if len(captures) > 2:
            colnum = captures[2]
        break

cmd = ["gvim"]

file_to_call = filename.split(":")[0].strip()

# once we switch top level docker image dir to crux or something else:
# file_to_call = file_to_call.replace("/crux-api", "/home/jtprince/dev/crux-api")

# Sometimes we get a module path:
if "/" not in file_to_call:
    file_to_call = file_to_call.replace(".", "/")
    file_to_call = file_to_call + ".py"

# Sometimes the module path starts with '=='
if file_to_call.startswith("=="):
    file_to_call = file_to_call.replace("==", "", 1)

nvim_args = []

if colnum:
    nvim_args = ["-c", f"call cursor({linenum}, {colnum})"]
elif linenum:
    nvim_args = ["-c", str(int(linenum))]

# becomes something like: neovide file.py -- -c ':180'
final_cmd = cmd + [file_to_call, "--"] + nvim_args

final_cmd_str = " ".join(final_cmd)
print("Running this command:")
print(final_cmd_str)

subprocess.run(final_cmd_str, shell=True, check=False)

print(f"forking: {final_cmd_str}")

# Example lines

# python
#  File "/home/jtprince/dev/doba.com/doba/apps/loggedout/tests.py", line 606, in test_HotProductsView
#  File "scratch.py", line 7, in <module>
# ./doba/apps/loggedout/views.py:698:33: E261 at least two spaces before inline comment
# ruby:
# /home/jtprince/bin/id3_rename.rb:5: syntax error, unexpected tIDENTIFIER, expecting end-of-input
# flake8
# ./doba/settings/common.py:325:1: E265 block comment should start with '# '
# django_utils.tests.test_utils:34
# ==django_utils.tests.test_utils:34
# FAILED tests/feature_finding/test_stepwise_feature_finder.py::TestStepwiseFeatureFinder::test_basic - TypeError: find_features() missing 1 required positional argument: 'ionization_mode'

#  File "/drone/src/blackwidow/libs/utils/tests/test_json.py", line 41, in test_object_with_to_dict
