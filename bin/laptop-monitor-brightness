#!/usr/bin/env ruby

# ENV variables required:
# $BACKLIGHT (one of: acpi_video0 acpi_video1 intel_backlight gmux_backlight)
# If no BACKLIGHT env variable then uses acpi_video0 if exists, else intel_backlight


backlight_dir ="/sys/class/backlight"
default_increment_type = :major

# note that you also need to create file </etc/udev/rules.d/97-intel_backlight.rules> with contents (no #):
# KERNEL=="intel_backlight", SUBSYSTEM=="backlight", RUN+="/usr/bin/chmod 666 /sys/class/backlight/%k/brightness"
# https://bbs.archlinux.org/viewtopic.php?id=167209
# udevadm control --reload  # or maybe reboot

video_cards = Dir[backlight_dir + "/*"].map {|v| File.basename(v) }
if ARGV.size == 0
  puts "usage: #{File.basename($0)} <video_card> [+|-] [increment=#{default_increment_type}]"
  puts "video card should be 'auto' or one of: "
  puts "    #{video_cards.join(", ")}"
  puts "auto respects BACKLIGHT env variable, otherwise acpi_video0 or intel_backlight"
  puts "always *prints* current brightness to stdout"
  puts
  puts "increments: major, medium, minor, fine"
  exit
end


def make_increment(max_val, factor)
  (max_val.to_f / factor).round.to_i
end


(video_card, operation, increment_type) = ARGV
operation = operation ? operation.to_sym : nil
increment_type = increment_type ? increment_type.to_sym : default_increment_type

video_card =
  if video_card == 'auto'
    if ENV.key?('BACKLIGHT')
      ENV['BACKLIGHT']
    else
      ['amdgpu_bl0', 'acpi_video0', 'intel_backlight'].find do |preferred_card|
        video_cards.include?(preferred_card)
      end
    end
  else
    video_card
  end


backlight_base ="#{backlight_dir}/#{video_card}"
max_val = `cat #{backlight_base }/max_brightness`.to_i

increments =
{
    major: 12.0,
    medium: 50.0,
}.map {|key, factor| [key, make_increment(max_val, factor)] }.to_h

# need finer gradation if tons of precision available
increments[:minor] =
  if max_val > 1000
    make_increment(max_val, 1000)
  else
    make_increment(max_val, 100)
  end

# Finest adjustment possible
increments[:fine] = 1


brightness_pipe = backlight_base  + "/brightness"
current_brightness = `cat #{brightness_pipe}`.to_i
output = []

if operation
  increment = increments[increment_type]
  new_brightness = current_brightness.send(operation, increment)
  if operation == :+
    max_val = `cat #{backlight_base }/max_brightness`.to_i
    new_brightness = max_val if new_brightness > max_val
  else
    new_brightness = 0 if new_brightness < 0
  end
  cmd = "echo #{new_brightness} > #{brightness_pipe}"
  # puts cmd
  `#{cmd}`
  output << operation << increment
end

current_brightness = `cat #{brightness_pipe}`.to_i
output << "(#{current_brightness.to_s} / #{max_val})"

output_str = "brightness: " + output.join(' ')
`notify-send "#{output_str}"`
puts output_str
