#!/usr/bin/env python

import argparse
import subprocess
import re
import stat
from pathlib import Path

parser = argparse.ArgumentParser(description="sets the file to executable")
parser.add_argument("paths", nargs="+", type=Path, help="the file to set as executable")
parser.add_argument("-r", "--recurse", action='store_true', help="also the level below")
args = parser.parse_args()

def make_executable(path):
    path.chmod(path.stat().st_mode | stat.S_IEXEC)
    print(f"Now executable: {str(path)}")

path_re = re.compile(r'line .*?: (/[^:]+): Permission denied')

def get_permission_path(line):
    match = path_re.search(line)
    if match:
        return Path(match.group(1))
    return None

def execute_and_get_new_candidates(path):
    try:
        subprocess.run(f'"./{str(path)}"', shell=True, text=True, check=True, capture_output=True)
    except subprocess.CalledProcessError as err:
        message = err.stderr.strip()
        print("error message************************")
        print(message)
        print("error message************************")
        if message:
            print("extracting sub files")
            return [get_permission_path(line) for line in message.split("\n")]


# TODO: make more generically recursive? This is so fugly (but fast to write)
paths = args.paths
for path in paths:
    make_executable(path)
    if args.recurse:
        new_paths = execute_and_get_new_candidates(path)
        new_paths = [path for path in new_paths if path is not None]
        for sub_path in new_paths:
            make_executable(sub_path)
