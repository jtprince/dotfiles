" John T. Prince

set nocompatible      " vim, not vi (first because of side-effects)

" Environment (follow XDG specification) ====================================

set directory=~/tmp,/tmp
set backupdir=~/tmp,/tmp
set viminfo+=n~/tmp/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

let mapleader = ','

" Vundle setup ==============================================================

" setup:
filetype on
filetype off                   " required!
set rtp+=~/.config/vim/bundle/vundle/
call vundle#rc( "~/.config/vim/bundle" )
Bundle 'gmarik/vundle'

" vim +BundleInstall +qall

" Bundles ===================================================================

" open and edit the file you want including path searching
"   command-t needs C-extensions:
"   ensure ruby-dev is installed, then 'rake make' in folder
" Bundle 'git://git.wincent.com/Command-T.git'
" powerful comment/uncomment for diff't languages
Bundle 'scrooloose/nerdcommenter'
" file view
" Bundle 'scrooloose/nerdtree'
" securely edit gpg files (.gpg .pgp or .asc)
" Bundle 'jamessan/vim-gnupg'
" ensure that gvim uses the proper 256 terminal colors
Bundle 'vim-scripts/colorsupport.vim'
" source code browser (e.g. methods and classes etc)
" sudo apt-get install exuberant-ctags
" Bundle 'vim-scripts/taglist.vim'
" vim-endwise
" Bundle 'tpope/vim-endwise'

" syntax additions
Bundle 'tpope/vim-markdown'
Bundle 'timcharper/textile.vim'
Bundle 'vim-scripts/eruby.vim'
Bundle 'vim-ruby/vim-ruby'
Bundle 'gisraptor/vim-lilypond-integrator'

"Bundle 'Eckankar/vim-latex-folding'
"Bundle 'gerw/vim-latex-suite'
" http://vim-latex.sourceforge.net/documentation/latex-suite/latex-folding.html
" <leader>rf to remake folds

" view ansi marked-up color in vim
Bundle 'vim-scripts/AnsiEsc.vim'

" allow doing diffs on small sections
"Bundle 'AndrewRadev/linediff.vim'
" remember old yanked things
" Bundle 'vim-scripts/YankRing.vim'
" do git things
" "Bundle 'tpope/vim-fugitive'
" change surround characters
" "Bundle 'tpope/vim-surround'
" ensure that things get closed up properly
" "Bundle 'spf13/vim-autoclose'
" line up programming structures
Bundle 'godlygeek/tabular'
" view the undo tree
" "Bundle 'mbbill/undotree'
" fancy word substition and completion
" "Bundle 'tpope/vim-abolish'

" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ

" ENABLE plugins ============================================================

" filetype detection, filetype specific indenting and plugins
" must be in this order
filetype plugin indent on

" FONT ======================================================================

if has("win32")
    set guifont=Andale_Mono:h8
else
    set guifont=Deja\ Vu\ Sans\ Mono\ 10
    " set guifont=Ubuntu\ Mono\ 12
endif

" BASIC CONFIG ==============================================================

set visualbell t_vb= " turn off error beep/flash
set mousehide   " Hide the mouse when typing text
set mouse=a     " use your mouse in a terminal
set ch=1        " Make command line one line high
set backspace=indent,eol,start  " trying this out
set ts=4        " tabstop # of spaces that <Tab> in file counts when displaying
set sw=4        " shiftwidth (?)
set tw=78       " always limit text width to 78
set autoindent  " uses indent from the previous line
set sts=4       " soft tab stop (for indentation >> << and <TAB>) (adds spaces)
set expandtab   " use spaces instead of tab (Ctrl-V<Tab> for real tab)
set ruler       " shows line and col number
set fo=l        " autoformating (l - long lines not broken on insert)
set printoptions=paper:letter
set guioptions-=m " remove the menu bar
set guioptions-=T " remove the gui toolbar
set gcr=a:blinkon0 "Disable cursor blink
set autoread    " Reload files changed outside vim
set hidden      " buffers can exist in bkg w/o window
set history=1000 " size of command history

set fileformats=unix,dos,mac
if exists("+spelllang")
  set spelllang=en_us
endif
set spellfile=~/.config/vim/spell/jtprince.en.utf-8.add

" set statusline=[%n]\ %<%.99f\ %h%w%m%r%{SL('CapsLockStatusline')}%y%{SL('fugitive#statusline')}%#ErrorMsg#%{SL('SyntasticStatuslineFlag')}%*%=%-14.(%l,%c%V%)\ %P

" search ====================================================================

set hls		         " Highlight search pattern matches
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" swap files ================================================================

set nobackup    " no ~ files
set noswapfile  " no .file.swp files
set nowb        " no automatic write backup

" persistent undo ===========================================================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/tmp/.vim-backups > /dev/null 2>&1
set undodir=~/tmp/.vim-backups
set undofile

" LANGUAGE EXTENSIONS =======================================================
" markdown
augroup mkd
  autocmd BufRead *.mkd *.md set ai formatoptions+=l lbr formatoptions=tcroqn2 comments=n:> 
augroup END
" yaml
autocmd BufRead *.yml set ts=2 sw=2 sts=2
autocmd BufRead *.yaml set ts=2 sw=2 sts=2
autocmd BufRead *.tex set formatoptions+=l lbr
autocmd BufRead *.txt set formatoptions+=l lbr
autocmd BufRead *.log set formatoptions+=l lbr
" make
au FileType make setlocal noexpandtab   " turn off et for makefiles

" FOLDING =======================================================

" folding for latex
let g:tex_fold_enabled=1

set foldenable          " Turn on folding
set foldmethod=indent   " Make folding indent sensitive
set foldlevel=100       " Don't autofold anything (but can still fold manually)
set foldopen-=search    " don't open folds when you search into them
set foldopen-=undo      " don't open folds when you undo stuff 
" NOTE--> zM closes all, zR opens all, zv expand to reveal cursor
" NOTE--> current: za toogle, zo opens, zc closes 

" FIX TYPOS =======================================================

iab varibale variable
iab varibales variables
iab pritn print
iab pirnt print
iab serach search
iab boolena boolean
 
" ****************************************************************
" SWAP things around
" For example, to swap "apple" and "orange" in the line below:
"         int apple, lemon, orange;
" 1. Delete "apple", using (for example) dw
" 2. Visually select "orange"
" 3. Press CTRL-X
vnoremap <C-X> <Esc>`.``gvP``P

" swap current word with next
:nnoremap <silent> hw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" swap current word with previous
:nnoremap <silent> hl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" push word to the right in sequence
:nnoremap <silent> hr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l
" swap current paragraph with next
:nnoremap h{ {dap}p{

function WordWrap()
    set formatoptions+=l
    set lbr
" formatoptions+=l lbr
endfunction

function NoWordWrap()
    set formatoptions-=l
    set nolbr
endfunction
":call WordWrap()

" *************************************************************************** 
"noremap \ldf :Linediff<CR>
"noremap \ldo :LinediffReset<CR>

" *************************************************************************** 

" use semicolon for all colon commands
:noremap ; :

" easier window control generally
noremap ,w <C-w>

" easier window navigation by holding down Ctrl
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" LEFT-HANDED NAVIGATION (right hand gets tired)
" s (go left) g (go right) d (go down) f (go up) 
" h = s  k = d  j = g
noremap s h
noremap g l
noremap d k
noremap f j

noremap h g
noremap l s
noremap k d
noremap j f

noremap hh gg

noremap F <PAGEDOWN>M
noremap D <PAGEUP>M

" ****************************************************************

" delete all contents of the buffer
noremap <leader>ecc :1,$d<CR>

" ****************************************************************
" COPY & PASTE using the external clipboard
" F2-cut, F3-copy, F4-paste
" cut
map <F2> "+x
" copy to global buffer (to paste outside of vim)
map <F3> "+y
" paste from clipboard
imap <F4> <Esc>"+gP 
map <F4> "+gP 

" ****************************************************************
" insert a debuggin line
map <F7> <Esc>O<Esc>0iprintf("%s %d\n", __FILE__, __LINE__);<Esc>j0
imap <F7> <Esc>O<Esc>0iprintf("%s %d\n", __FILE__, __LINE__);<Esc>j0
  

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Toggle search highlighting
nmap <silent> <leader>/ :set invhlsearch<CR>


" TABS ======================================================================
" vim -p <file> <file> ... # opens pages in tabs
" close the current tab
nnoremap <C-w> :tabclose<CR>
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Short file type specific ==================================================

autocmd Filetype html setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 noexpandtab
autocmd Filetype tex setlocal foldmethod=syntax

" SIZE ======================================================================

if has('gui_running')
  set lines=60
  set columns=80
endif

" *************************************************************************** 
" COLOR CONFIG

syntax enable             " Enable syntax highlighting
if has('gui_running')
    set background=light
    colorscheme jtplight
else
    set background=dark
    colorscheme tortejtp
endif
