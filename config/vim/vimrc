" John T. Prince

set nocompatible " vim, not vi (called first because of side-effects)

" ENVIRONMENT ================================================================
"(follow XDG specification for heaven's sake)

set directory=~/tmp,/tmp
set backupdir=~/tmp,/tmp
set viminfo+=n~/tmp/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" hail the all powerful leader key!
let mapleader = ','

" use semicolon for all colon commands
:noremap ; :

" VUNDLE =====================================================================
" (setup)

filetype on
filetype off                   " required!
set rtp+=~/.config/vim-bundle/vundle
call vundle#rc( "~/.config/vim-bundle" )
Bundle 'gmarik/vundle'

" to run from cmdline:
" vim +BundleInstall +qall

" BUNDLES ====================================================================
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ

" powerful comment/uncomment for diff't languages
Bundle 'scrooloose/nerdcommenter'

" ensure that gvim uses the proper 256 terminal colors
Bundle 'vim-scripts/colorsupport.vim'

" highlight/remove trailing whitespace
Bundle 'ntpeters/vim-better-whitespace'
" :StripWhitespace (also :ToggleWhitespace)

""" syntax additions
" python
Bundle 'nvie/vim-flake8'
" <F7> runs flake8
" ruby
Bundle 'timcharper/textile.vim'
Bundle 'vim-scripts/eruby.vim'
Bundle 'vim-ruby/vim-ruby'
" markdown
Bundle 'tpope/vim-markdown'
" lilypond
Bundle 'gisraptor/vim-lilypond-integrator'

" view ansi marked-up color in vim
Bundle 'vim-scripts/AnsiEsc.vim'

" find files to edit (other options Command-T or nerdtree)
Bundle 'kien/ctrlp.vim'
let g:ctrlp_custom_ignore = {
\ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|tmp$\|node_modules$',
\ 'file': '\.pyc\.exe$\|\.so$\|\.dat$'
\ }

" (vim-fugitive is a dependency for conflicted)
" Bundle 'tpope/vim-fugitive'
" Bundle 'christoomey/vim-conflicted'

" ENABLE plugins =============================================================

" filetype detection, filetype specific indenting and plugins
" must be in this order
filetype plugin indent on

" BASIC CONFIG ===============================================================

set visualbell t_vb= " turn off error beep/flash
set mousehide   " Hide the mouse when typing text
set mouse=a     " use your mouse in a terminal
set ch=1        " Make command line one line high
set backspace=indent,eol,start  " trying this out
set ts=4        " tabstop # of spaces that <Tab> in file counts when displaying
set sw=4        " shiftwidth (?)
set tw=78       " always limit text width to 78
set autoindent  " uses indent from the previous line
set sts=4       " soft tab stop (for indentation >> << and <TAB>) (adds spaces)
set expandtab   " use spaces instead of tab (Ctrl-V<Tab> for real tab)
set ruler       " shows line and col number
set fo=l        " autoformating (l - long lines not broken on insert)
set printoptions=paper:letter
set guioptions-=m " remove the menu bar
set guioptions-=T " remove the gui toolbar
set gcr=a:blinkon0 "Disable cursor blink
set autoread    " Reload files changed outside vim
set hidden      " buffers can exist in bkg w/o window
set history=1000 " size of command history

set fileformats=unix,dos,mac
if exists("+spelllang")
  set spelllang=en_us
endif
set spellfile=~/.config/vim/spell/jtprince.en.utf-8.add

" SEARCH =====================================================================

set hls		         " Highlight search pattern matches
set viminfo='100,f1  " Save up to 100 marks, enable capital marks
" Toggle search highlighting
nmap <silent> <leader>/ :set invhlsearch<CR>

" DEBUG ======================================================================
" <leader> p is reserved for a debugging statement in different languages

" SWAP FILES =================================================================

set nobackup    " no ~ files
set noswapfile  " no .file.swp files
set nowb        " no automatic write backup

" PERSISTENT UNDO ============================================================
" Keep undo history across sessions, by storing in file.

silent !mkdir ~/tmp/.vim-backups > /dev/null 2>&1
set undodir=~/tmp/.vim-backups
set undofile

" SIMPLE LANGUAGE EXTENSIONS =================================================
" markdown
augroup mkd
  autocmd BufRead *.mkd *.md set ai formatoptions+=l lbr formatoptions=tcroqn2 comments=n:>
augroup END
" yaml
autocmd BufRead *.yml set ts=2 sw=2 sts=2
autocmd BufRead *.yaml set ts=2 sw=2 sts=2
" latex
autocmd BufRead *.tex set formatoptions+=l lbr
" text and log
autocmd BufRead *.txt set formatoptions+=l lbr
autocmd BufRead *.log set formatoptions+=l lbr

" make
au FileType make setlocal noexpandtab   " turn off et for makefiles
autocmd Filetype html setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 noexpandtab
autocmd Filetype tex setlocal foldmethod=syntax

" reads in ftplugin/python.vim
autocmd BufRead,BufNewFile *.py setfiletype python

" FOLDING ====================================================================
" folding for latex
let g:tex_fold_enabled=1

set foldenable          " Turn on folding
set foldmethod=indent   " Make folding indent sensitive
set foldlevel=100       " Don't autofold anything (but can still fold manually)
set foldopen-=search    " don't open folds when you search into them
set foldopen-=undo      " don't open folds when you undo stuff
" NOTE--> zM closes all, zR opens all, zv expand to reveal cursor
" NOTE--> current: za toogle, zo opens, zc closes

" FIX TYPOS ==================================================================

iab varibale variable
iab varibales variables
iab pritn print
iab pirnt print
iab serach search
iab boolena boolean

" SWAPPING ===================================================================
" SWAP things around
" For example, to swap "apple" and "orange" in the line below:
"         int apple, lemon, orange;
" 1. Delete "apple", using (for example) dw
" 2. Visually select "orange"
" 3. Press CTRL-X
vnoremap <C-X> <Esc>`.``gvP``P

" swap current word with next
:nnoremap <silent> hw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" swap current word with previous
:nnoremap <silent> hl "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>
" push word to the right in sequence
:nnoremap <silent> hr "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l
" swap current paragraph with next
:nnoremap h{ {dap}p{

" WORD WRAP ===================================================================
":call WordWrap()
function WordWrap()
    set formatoptions+=l
    set lbr
endfunction

":call NoWordWrap()
function NoWordWrap()
    set formatoptions-=l
    set nolbr
endfunction

" WINDOW NAV =================================================================
" easier window control generally
noremap <leader>w <C-w>

" easier window navigation by holding down Ctrl
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" LEFT-HANDED NAVIGATION =====================================================
"  (right hand gets tired)
" s (go left) g (go right) d (go down) f (go up)
" h = s  k = d  j = g
noremap s h
noremap g l
noremap d k
noremap f j

noremap h g
noremap l s
noremap k d
noremap j f

noremap hh gg

noremap F <PAGEDOWN>M
noremap D <PAGEUP>M

" COPY AND PASTE ============================================================
" (using the external clipboard)
" F2-cut, F3-copy, F4-paste
" cut
map <F2> "+x
" copy to global buffer (to paste outside of vim)
map <F3> "+y
" paste from clipboard
imap <F4> <Esc>"+gP
map <F4> "+gP

" TABS ======================================================================
" vim -p <file> <file> ... # opens pages in tabs
" close the current tab
nnoremap <C-w> :tabclose<CR>
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" CURRENT FILENAME ===========================================================
" http://stackoverflow.com/questions/916875/yank-file-name-path-of-current-buffer-in-vim
" copy current file name (relative/absolute) to system clipboard (Linux version)
if has("gui_gtk") || has("gui_gtk2") || has("gui_gnome") || has("unix")
  " relative path (src/foo.txt)
  nnoremap <leader>cf :let @+=expand("%")<CR>

  " absolute path (/something/src/foo.txt)
  nnoremap <leader>cF :let @+=expand("%:p")<CR>

  " filename (foo.txt)
  nnoremap <leader>ct :let @+=expand("%:t")<CR>

  " directory name (/something/src)
  nnoremap <leader>ch :let @+=expand("%:p:h")<CR>
endif

" MISC ======================================================================
" delete all contents of the buffer
noremap <leader>ecc :1,$d<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" FONT =======================================================================

if has("win32")
    set guifont=Andale_Mono:h8
else
    set guifont=Deja\ Vu\ Sans\ Mono\ 10
endif

" SIZE ======================================================================

if has('gui_running')
  set lines=60
  set columns=80
endif

" COLOR CONFIG ===============================================================

syntax enable             " Enable syntax highlighting
if has('gui_running')
    set background=light
    colorscheme jtplight
else
    set background=dark
    colorscheme tortejtp
endif
