
# to mock a chained attribute, add simply add the name of the attribute
# to mock a *call*, use `return_value` (in all its variety) or side_effect.

    obj.color.shade()

    # assume mymock is obj
    mymock.color.shade.return_value = "light"

    obj.query.where(cls.dsn == dsn).order_by(param).gino.first()

    # assume mymock is obj
    mymock.query.where.return_value.order_by.return_value.gino.first.return_value = "hello"

# to mock a class initializer, just treat it as a call on the class

    mock = mocker.patch("path.to.my.MyClass")
    mock.return_value = SomeMockedClass()

# Checking calls

    # get a list of all calls
    mock.call_args_list

    # last call (or None)
    mock.call_args

    mock.assert_called_once_with(<args or kwargs>)
    mock.assert_called_with(<args or kwargs>)

# The 3 levels of mocking

## spec - Terrible

<need example>

## spec_set=True - Okay

<need example>
spec_set=<ref> or spec_set=True

## Autospec - Gold Standard to create a mock

unittest.mock.create_autospec(spec=<class or instance>, spec_set=True)
mocker.create_autospec(spec=<class or instance>, spec_set=True)
